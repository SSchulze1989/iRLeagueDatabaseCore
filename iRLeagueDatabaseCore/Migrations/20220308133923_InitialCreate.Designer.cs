// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using iRLeagueDatabaseCore.Models;

namespace iRLeagueDatabaseCore.Migrations
{
    [DbContext(typeof(LeagueDbContext))]
    [Migration("20220308133923_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "Latin1_General_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.13");

            modelBuilder.Entity("IncidentReviewEntityMemberEntity", b =>
                {
                    b.Property<long>("InvolvedMembersMemberId")
                        .HasColumnType("bigint");

                    b.Property<long>("InvolvedReviewsReviewId")
                        .HasColumnType("bigint");

                    b.HasKey("InvolvedMembersMemberId", "InvolvedReviewsReviewId");

                    b.HasIndex("InvolvedReviewsReviewId");

                    b.ToTable("IncidentReviewEntityMemberEntity");
                });

            modelBuilder.Entity("MemberEntityScoredResultEntity", b =>
                {
                    b.Property<long>("CleanestDriversMemberId")
                        .HasColumnType("bigint");

                    b.Property<long>("CleanestDriverResultsResultId")
                        .HasColumnType("bigint");

                    b.Property<long>("CleanestDriverResultsScoringId")
                        .HasColumnType("bigint");

                    b.HasKey("CleanestDriversMemberId", "CleanestDriverResultsResultId", "CleanestDriverResultsScoringId");

                    b.HasIndex("CleanestDriverResultsResultId", "CleanestDriverResultsScoringId");

                    b.ToTable("MemberEntityScoredResultEntity");
                });

            modelBuilder.Entity("MemberEntityScoredResultEntity1", b =>
                {
                    b.Property<long>("HardChargersMemberId")
                        .HasColumnType("bigint");

                    b.Property<long>("HardChargerResultsResultId")
                        .HasColumnType("bigint");

                    b.Property<long>("HardChargerResultsScoringId")
                        .HasColumnType("bigint");

                    b.HasKey("HardChargersMemberId", "HardChargerResultsResultId", "HardChargerResultsScoringId");

                    b.HasIndex("HardChargerResultsResultId", "HardChargerResultsScoringId");

                    b.ToTable("MemberEntityScoredResultEntity1");
                });

            modelBuilder.Entity("ScoredResultRowEntityScoredTeamResultRowEntity", b =>
                {
                    b.Property<long>("ScoredResultRowsScoredResultRowId")
                        .HasColumnType("bigint");

                    b.Property<long>("ScoredTeamResultRowsScoredResultRowId")
                        .HasColumnType("bigint");

                    b.HasKey("ScoredResultRowsScoredResultRowId", "ScoredTeamResultRowsScoredResultRowId");

                    b.HasIndex("ScoredTeamResultRowsScoredResultRowId");

                    b.ToTable("ScoredResultRowEntityScoredTeamResultRowEntity");
                });

            modelBuilder.Entity("ScoringEntitySessionEntity", b =>
                {
                    b.Property<long>("ScoringsScoringId")
                        .HasColumnType("bigint");

                    b.Property<long>("SessionsSessionId")
                        .HasColumnType("bigint");

                    b.HasKey("ScoringsScoringId", "SessionsSessionId");

                    b.HasIndex("SessionsSessionId");

                    b.ToTable("ScoringEntitySessionEntity");
                });

            modelBuilder.Entity("StatisticSetEntityStatisticSetEntity", b =>
                {
                    b.Property<long>("DependendStatisticSetsId")
                        .HasColumnType("bigint");

                    b.Property<long>("LeagueStatisticSetsId")
                        .HasColumnType("bigint");

                    b.HasKey("DependendStatisticSetsId", "LeagueStatisticSetsId");

                    b.HasIndex("LeagueStatisticSetsId");

                    b.ToTable("StatisticSetEntityStatisticSetEntity");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.AcceptedReviewVoteEntity", b =>
                {
                    b.Property<long>("ReviewVoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("CustomVoteCatId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<long>("LeagueId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MemberAtFaultId")
                        .HasColumnType("bigint");

                    b.Property<long>("ReviewId")
                        .HasColumnType("bigint");

                    b.Property<int>("Vote")
                        .HasColumnType("int");

                    b.HasKey("ReviewVoteId")
                        .HasName("PK_dbo.AcceptedReviewVoteEntities");

                    b.HasIndex(new[] { "CustomVoteCatId" }, "IX_CustomVoteCatId");

                    b.HasIndex(new[] { "MemberAtFaultId" }, "IX_MemberAtFaultId");

                    b.HasIndex(new[] { "ReviewId" }, "IX_ReviewId");

                    b.ToTable("AcceptedReviewVoteEntities");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.AddPenaltyEntity", b =>
                {
                    b.Property<long>("ScoredResultRowId")
                        .HasColumnType("bigint");

                    b.Property<long>("LeagueId")
                        .HasColumnType("bigint");

                    b.Property<int>("PenaltyPoints")
                        .HasColumnType("int");

                    b.HasKey("ScoredResultRowId")
                        .HasName("PK_dbo.AddPenaltyEntities");

                    b.HasIndex(new[] { "ScoredResultRowId" }, "IX_ScoredResultRowId");

                    b.ToTable("AddPenaltyEntities");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.CommentBaseEntity", b =>
                {
                    b.Property<long>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("AuthorName")
                        .HasColumnType("text");

                    b.Property<string>("AuthorUserId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("LastModifiedByUserId")
                        .HasColumnType("text");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<long>("LeagueId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ReplyToCommentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ReviewId")
                        .HasColumnType("bigint");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("CommentId")
                        .HasName("PK_dbo.CommentBaseEntities");

                    b.HasIndex(new[] { "ReplyToCommentId" }, "IX_ReplyToCommentId");

                    b.HasIndex(new[] { "ReviewId" }, "IX_ReviewId")
                        .HasDatabaseName("IX_ReviewId1");

                    b.ToTable("CommentBaseEntities");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.CommentReviewVoteEntity", b =>
                {
                    b.Property<long>("ReviewVoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("CommentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CustomVoteCatId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<long>("LeagueId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MemberAtFaultId")
                        .HasColumnType("bigint");

                    b.Property<int>("Vote")
                        .HasColumnType("int");

                    b.HasKey("ReviewVoteId")
                        .HasName("PK_dbo.CommentReviewVoteEntities");

                    b.HasIndex(new[] { "CommentId" }, "IX_CommentId");

                    b.HasIndex(new[] { "CustomVoteCatId" }, "IX_CustomVoteCatId")
                        .HasDatabaseName("IX_CustomVoteCatId1");

                    b.HasIndex(new[] { "MemberAtFaultId" }, "IX_MemberAtFaultId")
                        .HasDatabaseName("IX_MemberAtFaultId1");

                    b.ToTable("CommentReviewVoteEntities");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.CustomIncidentEntity", b =>
                {
                    b.Property<long>("IncidentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<long>("LeagueId")
                        .HasColumnType("bigint");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.HasKey("IncidentId")
                        .HasName("PK_dbo.CustomIncidentEntities");

                    b.HasIndex("LeagueId");

                    b.ToTable("CustomIncidentEntities");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.DriverStatisticRowEntity", b =>
                {
                    b.Property<long>("StatisticSetId")
                        .HasColumnType("bigint");

                    b.Property<long>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<double>("AvgFinalPosition")
                        .HasColumnType("double");

                    b.Property<double>("AvgFinishPosition")
                        .HasColumnType("double");

                    b.Property<double>("AvgIncidentsPerKm")
                        .HasColumnType("double");

                    b.Property<double>("AvgIncidentsPerLap")
                        .HasColumnType("double");

                    b.Property<double>("AvgIncidentsPerRace")
                        .HasColumnType("double");

                    b.Property<double>("AvgIrating")
                        .HasColumnType("double")
                        .HasColumnName("AvgIRating");

                    b.Property<double>("AvgPenaltyPointsPerKm")
                        .HasColumnType("double");

                    b.Property<double>("AvgPenaltyPointsPerLap")
                        .HasColumnType("double");

                    b.Property<double>("AvgPenaltyPointsPerRace")
                        .HasColumnType("double");

                    b.Property<double>("AvgPointsPerRace")
                        .HasColumnType("double");

                    b.Property<double>("AvgSrating")
                        .HasColumnType("double")
                        .HasColumnName("AvgSRating");

                    b.Property<double>("AvgStartPosition")
                        .HasColumnType("double");

                    b.Property<int>("BestFinalPosition")
                        .HasColumnType("int");

                    b.Property<double>("BestFinishPosition")
                        .HasColumnType("double");

                    b.Property<double>("BestStartPosition")
                        .HasColumnType("double");

                    b.Property<double>("BonusPoints")
                        .HasColumnType("double");

                    b.Property<int>("CleanestDriverAwards")
                        .HasColumnType("int");

                    b.Property<double>("CompletedLaps")
                        .HasColumnType("double");

                    b.Property<int>("CurrentSeasonPosition")
                        .HasColumnType("int");

                    b.Property<double>("DrivenKm")
                        .HasColumnType("double");

                    b.Property<int>("EndIrating")
                        .HasColumnType("int")
                        .HasColumnName("EndIRating");

                    b.Property<double>("EndSrating")
                        .HasColumnType("double")
                        .HasColumnName("EndSRating");

                    b.Property<int>("FastestLaps")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FirstRaceDate")
                        .HasColumnType("datetime");

                    b.Property<int>("FirstRaceFinalPosition")
                        .HasColumnType("int");

                    b.Property<double>("FirstRaceFinishPosition")
                        .HasColumnType("double");

                    b.Property<long?>("FirstRaceId")
                        .HasColumnType("bigint");

                    b.Property<double>("FirstRaceStartPosition")
                        .HasColumnType("double");

                    b.Property<long?>("FirstResultRowId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("FirstSessionDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("FirstSessionId")
                        .HasColumnType("bigint");

                    b.Property<int>("HardChargerAwards")
                        .HasColumnType("int");

                    b.Property<double>("Incidents")
                        .HasColumnType("double");

                    b.Property<int>("IncidentsUnderInvestigation")
                        .HasColumnType("int");

                    b.Property<int>("IncidentsWithPenalty")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastRaceDate")
                        .HasColumnType("datetime");

                    b.Property<int>("LastRaceFinalPosition")
                        .HasColumnType("int");

                    b.Property<double>("LastRaceFinishPosition")
                        .HasColumnType("double");

                    b.Property<long?>("LastRaceId")
                        .HasColumnType("bigint");

                    b.Property<double>("LastRaceStartPosition")
                        .HasColumnType("double");

                    b.Property<long?>("LastResultRowId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastSessionDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("LastSessionId")
                        .HasColumnType("bigint");

                    b.Property<double>("LeadingKm")
                        .HasColumnType("double");

                    b.Property<double>("LeadingLaps")
                        .HasColumnType("double");

                    b.Property<long>("LeagueId")
                        .HasColumnType("bigint");

                    b.Property<double>("PenaltyPoints")
                        .HasColumnType("double");

                    b.Property<int>("Poles")
                        .HasColumnType("int");

                    b.Property<double>("RacePoints")
                        .HasColumnType("double");

                    b.Property<int>("Races")
                        .HasColumnType("int");

                    b.Property<int>("RacesCompleted")
                        .HasColumnType("int");

                    b.Property<int>("RacesInPoints")
                        .HasColumnType("int");

                    b.Property<int>("StartIrating")
                        .HasColumnType("int")
                        .HasColumnName("StartIRating");

                    b.Property<double>("StartSrating")
                        .HasColumnType("double")
                        .HasColumnName("StartSRating");

                    b.Property<int>("Titles")
                        .HasColumnType("int");

                    b.Property<int>("Top10")
                        .HasColumnType("int");

                    b.Property<int>("Top15")
                        .HasColumnType("int");

                    b.Property<int>("Top20")
                        .HasColumnType("int");

                    b.Property<int>("Top25")
                        .HasColumnType("int");

                    b.Property<int>("Top3")
                        .HasColumnType("int");

                    b.Property<int>("Top5")
                        .HasColumnType("int");

                    b.Property<double>("TotalPoints")
                        .HasColumnType("double");

                    b.Property<int>("Wins")
                        .HasColumnType("int");

                    b.Property<int>("WorstFinalPosition")
                        .HasColumnType("int");

                    b.Property<double>("WorstFinishPosition")
                        .HasColumnType("double");

                    b.Property<double>("WorstStartPosition")
                        .HasColumnType("double");

                    b.HasKey("StatisticSetId", "MemberId")
                        .HasName("PK_dbo.DriverStatisticRowEntities");

                    b.HasIndex(new[] { "FirstRaceId" }, "IX_FirstRaceId");

                    b.HasIndex(new[] { "FirstResultRowId" }, "IX_FirstResultRowId");

                    b.HasIndex(new[] { "FirstSessionId" }, "IX_FirstSessionId");

                    b.HasIndex(new[] { "LastRaceId" }, "IX_LastRaceId");

                    b.HasIndex(new[] { "LastResultRowId" }, "IX_LastResultRowId");

                    b.HasIndex(new[] { "LastSessionId" }, "IX_LastSessionId");

                    b.HasIndex(new[] { "MemberId" }, "IX_MemberId");

                    b.HasIndex(new[] { "StatisticSetId" }, "IX_StatisticSetId");

                    b.ToTable("DriverStatisticRowEntities");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.IRSimSessionDetailsEntity", b =>
                {
                    b.Property<long>("ResultId")
                        .HasColumnType("bigint");

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<string>("ConfigName")
                        .HasColumnType("text");

                    b.Property<int>("CornersPerLap")
                        .HasColumnType("int");

                    b.Property<int>("DamageModel")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<long>("EventAverageLap")
                        .HasColumnType("bigint");

                    b.Property<int>("EventLapsComplete")
                        .HasColumnType("int");

                    b.Property<int>("EventStrengthOfField")
                        .HasColumnType("int");

                    b.Property<int>("Fog")
                        .HasColumnType("int");

                    b.Property<int>("IRRaceWeek")
                        .HasColumnType("int");

                    b.Property<long>("IRSeasonId")
                        .HasColumnType("bigint");

                    b.Property<string>("IRSeasonName")
                        .HasColumnType("text");

                    b.Property<int>("IRSeasonQuarter")
                        .HasColumnType("int");

                    b.Property<int>("IRSeasonYear")
                        .HasColumnType("int");

                    b.Property<long>("IRSessionId")
                        .HasColumnType("bigint");

                    b.Property<long>("IRSubsessionId")
                        .HasColumnType("bigint");

                    b.Property<int>("IRTrackId")
                        .HasColumnType("int");

                    b.Property<double>("KmDistPerLap")
                        .HasColumnType("double");

                    b.Property<bool>("LeaveMarbles")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LicenseCategory")
                        .HasColumnType("int");

                    b.Property<int>("MaxWeeks")
                        .HasColumnType("int");

                    b.Property<int>("NumCautionLaps")
                        .HasColumnType("int");

                    b.Property<int>("NumCautions")
                        .HasColumnType("int");

                    b.Property<int>("NumLeadChanges")
                        .HasColumnType("int");

                    b.Property<int>("PracticeGripCompound")
                        .HasColumnType("int");

                    b.Property<int>("PracticeRubber")
                        .HasColumnType("int");

                    b.Property<int>("QualifyGripCompund")
                        .HasColumnType("int");

                    b.Property<int>("QualifyRubber")
                        .HasColumnType("int");

                    b.Property<int>("RaceGripCompound")
                        .HasColumnType("int");

                    b.Property<int>("RaceRubber")
                        .HasColumnType("int");

                    b.Property<int>("RelHumidity")
                        .HasColumnType("int");

                    b.Property<string>("SessionName")
                        .HasColumnType("text");

                    b.Property<long>("SimStartUtcOffset")
                        .HasColumnType("bigint")
                        .HasColumnName("SimStartUTCOffset");

                    b.Property<DateTime?>("SimStartUtcTime")
                        .HasColumnType("datetime")
                        .HasColumnName("SimStartUTCTime");

                    b.Property<int>("Skies")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime");

                    b.Property<int>("TempUnits")
                        .HasColumnType("int");

                    b.Property<int>("TempValue")
                        .HasColumnType("int");

                    b.Property<int>("TimeOfDay")
                        .HasColumnType("int");

                    b.Property<int>("TrackCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("TrackName")
                        .HasColumnType("text");

                    b.Property<int>("WarmupGripCompound")
                        .HasColumnType("int");

                    b.Property<int>("WarmupRubber")
                        .HasColumnType("int");

                    b.Property<int>("WeatherType")
                        .HasColumnType("int");

                    b.Property<int>("WeatherVarInitial")
                        .HasColumnType("int");

                    b.Property<int>("WeatherVarOngoing")
                        .HasColumnType("int");

                    b.Property<int>("WindDir")
                        .HasColumnType("int");

                    b.Property<int>("WindUnits")
                        .HasColumnType("int");

                    b.HasKey("ResultId");

                    b.ToTable("IRSimSessionDetailsEntity");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.IncidentReviewEntity", b =>
                {
                    b.Property<long>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("AuthorName")
                        .HasColumnType("text");

                    b.Property<string>("AuthorUserId")
                        .HasColumnType("text");

                    b.Property<string>("Corner")
                        .HasColumnType("text");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("FullDescription")
                        .HasColumnType("text");

                    b.Property<string>("IncidentKind")
                        .HasColumnType("text");

                    b.Property<string>("IncidentNr")
                        .HasColumnType("text");

                    b.Property<string>("LastModifiedByUserId")
                        .HasColumnType("text");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<long>("LeagueId")
                        .HasColumnType("bigint");

                    b.Property<string>("OnLap")
                        .HasColumnType("text");

                    b.Property<string>("ResultLongText")
                        .HasColumnType("text");

                    b.Property<long>("SessionId")
                        .HasColumnType("bigint");

                    b.Property<TimeSpan>("TimeStamp")
                        .HasColumnType("time");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("ReviewId")
                        .HasName("PK_dbo.IncidentReviewEntities");

                    b.HasIndex(new[] { "SessionId" }, "IX_SessionId");

                    b.ToTable("IncidentReviewEntities");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.LeagueEntity", b =>
                {
                    b.Property<long>("LeagueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NameFull")
                        .HasColumnType("text");

                    b.HasKey("LeagueId")
                        .HasName("PK_dbo.LeagueEntities");

                    b.ToTable("Leagues");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.MemberEntity", b =>
                {
                    b.Property<long>("MemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("DanLisaId")
                        .HasColumnType("text");

                    b.Property<string>("DiscordId")
                        .HasColumnType("text");

                    b.Property<string>("Firstname")
                        .HasColumnType("text");

                    b.Property<string>("IRacingId")
                        .HasColumnType("text");

                    b.Property<string>("Lastname")
                        .HasColumnType("text");

                    b.Property<long?>("TeamEntityTeamId")
                        .HasColumnType("bigint");

                    b.HasKey("MemberId")
                        .HasName("PK_dbo.LeagueMemberEntities");

                    b.HasIndex("TeamEntityTeamId");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ResultEntity", b =>
                {
                    b.Property<long>("ResultId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("LastModifiedByUserId")
                        .HasColumnType("text");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<long>("PoleLaptime")
                        .HasColumnType("bigint");

                    b.Property<bool>("RequiresRecalculation")
                        .HasColumnType("tinyint(1)");

                    b.Property<long?>("SeasonId")
                        .HasColumnType("bigint");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("ResultId")
                        .HasName("PK_dbo.ResultEntities");

                    b.HasIndex(new[] { "ResultId" }, "IX_ResultId");

                    b.HasIndex(new[] { "SeasonId" }, "IX_SeasonId");

                    b.ToTable("ResultEntities");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ResultRowEntity", b =>
                {
                    b.Property<long>("ResultRowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("AvgLapTime")
                        .HasColumnType("bigint");

                    b.Property<string>("Car")
                        .HasColumnType("text");

                    b.Property<string>("CarClass")
                        .HasColumnType("text");

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<int>("CarNumber")
                        .HasColumnType("int");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<int>("ClubId")
                        .HasColumnType("int");

                    b.Property<string>("ClubName")
                        .HasColumnType("text");

                    b.Property<double>("CompletedLaps")
                        .HasColumnType("double");

                    b.Property<double>("CompletedPct")
                        .HasColumnType("double");

                    b.Property<string>("ContactLaps")
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<int>("Division")
                        .HasColumnType("int");

                    b.Property<int>("FastLapNr")
                        .HasColumnType("int");

                    b.Property<long>("FastestLapTime")
                        .HasColumnType("bigint");

                    b.Property<double>("FinishPosition")
                        .HasColumnType("double");

                    b.Property<double>("Incidents")
                        .HasColumnType("double");

                    b.Property<long>("Interval")
                        .HasColumnType("bigint");

                    b.Property<string>("IracingId")
                        .HasColumnType("text")
                        .HasColumnName("IRacingId");

                    b.Property<double>("LeadLaps")
                        .HasColumnType("double");

                    b.Property<string>("License")
                        .HasColumnType("text");

                    b.Property<long>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<int>("NewCpi")
                        .HasColumnType("int");

                    b.Property<int>("NewIrating")
                        .HasColumnType("int")
                        .HasColumnName("NewIRating");

                    b.Property<int>("NewLicenseLevel")
                        .HasColumnType("int");

                    b.Property<double>("NewSafetyRating")
                        .HasColumnType("double");

                    b.Property<int>("NumContactLaps")
                        .HasColumnType("int");

                    b.Property<int>("NumOfftrackLaps")
                        .HasColumnType("int");

                    b.Property<int>("NumPitStops")
                        .HasColumnType("int");

                    b.Property<string>("OfftrackLaps")
                        .HasColumnType("text");

                    b.Property<int>("OldCpi")
                        .HasColumnType("int");

                    b.Property<int>("OldIrating")
                        .HasColumnType("int")
                        .HasColumnName("OldIRating");

                    b.Property<int>("OldLicenseLevel")
                        .HasColumnType("int");

                    b.Property<double>("OldSafetyRating")
                        .HasColumnType("double");

                    b.Property<string>("PittedLaps")
                        .HasColumnType("text");

                    b.Property<bool?>("PointsEligible")
                        .IsRequired()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("((1))");

                    b.Property<double>("PositionChange")
                        .HasColumnType("double");

                    b.Property<long>("QualifyingTime")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("QualifyingTimeAt")
                        .HasColumnType("datetime");

                    b.Property<long>("ResultId")
                        .HasColumnType("bigint");

                    b.Property<int>("SeasonStartIrating")
                        .HasColumnType("int")
                        .HasColumnName("SeasonStartIRating");

                    b.Property<int>("SimSessionType")
                        .HasColumnType("int");

                    b.Property<double>("StartPosition")
                        .HasColumnType("double");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<long?>("TeamId")
                        .HasColumnType("bigint");

                    b.HasKey("ResultRowId")
                        .HasName("PK_dbo.ResultRowEntities");

                    b.HasIndex(new[] { "MemberId" }, "IX_MemberId")
                        .HasDatabaseName("IX_MemberId1");

                    b.HasIndex(new[] { "ResultId" }, "IX_ResultId")
                        .HasDatabaseName("IX_ResultId1");

                    b.HasIndex(new[] { "TeamId" }, "IX_TeamId");

                    b.ToTable("ResultRowEntities");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ResultsFilterOptionEntity", b =>
                {
                    b.Property<long>("ResultsFilterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("ColumnPropertyName")
                        .HasColumnType("text");

                    b.Property<int>("Comparator")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<bool>("Exclude")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("FilterPointsOnly")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FilterValues")
                        .HasColumnType("text");

                    b.Property<string>("LastModifiedByUserId")
                        .HasColumnType("text");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("ResultsFilterType")
                        .HasColumnType("text");

                    b.Property<long>("ScoringId")
                        .HasColumnType("bigint");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("ResultsFilterId")
                        .HasName("PK_dbo.ResultsFilterOptionEntities");

                    b.HasIndex(new[] { "ScoringId" }, "IX_ScoringId");

                    b.ToTable("ResultsFilterOptionEntities");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ReviewPenaltyEntity", b =>
                {
                    b.Property<long>("ResultRowId")
                        .HasColumnType("bigint");

                    b.Property<long>("ReviewId")
                        .HasColumnType("bigint");

                    b.Property<int>("PenaltyPoints")
                        .HasColumnType("int");

                    b.Property<long?>("ReviewVoteId")
                        .HasColumnType("bigint");

                    b.HasKey("ResultRowId", "ReviewId")
                        .HasName("PK_dbo.ReviewPenaltyEntities");

                    b.HasIndex(new[] { "ResultRowId" }, "IX_ResultRowId");

                    b.HasIndex(new[] { "ReviewId" }, "IX_ReviewId")
                        .HasDatabaseName("IX_ReviewId2");

                    b.HasIndex(new[] { "ReviewVoteId" }, "IX_ReviewVoteId");

                    b.ToTable("ReviewPenaltyEntities");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ScheduleEntity", b =>
                {
                    b.Property<long>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("LastModifiedByUserId")
                        .HasColumnType("text");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<long>("LeagueId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long>("SeasonId")
                        .HasColumnType("bigint")
                        .HasColumnName("SeasonId");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("ScheduleId")
                        .HasName("PK_dbo.ScheduleEntities");

                    b.HasIndex("LeagueId");

                    b.HasIndex(new[] { "SeasonId" }, "IX_SeasonId")
                        .HasDatabaseName("IX_SeasonId1");

                    b.ToTable("ScheduleEntities");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ScoredResultEntity", b =>
                {
                    b.Property<long>("ResultId")
                        .HasColumnType("bigint");

                    b.Property<long>("ScoringId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<long>("FastestAvgLap")
                        .HasColumnType("bigint");

                    b.Property<long?>("FastestAvgLapDriverMemberId")
                        .HasColumnType("bigint")
                        .HasColumnName("FastestAvgLapDriver_MemberId");

                    b.Property<long>("FastestLap")
                        .HasColumnType("bigint");

                    b.Property<long?>("FastestLapDriverMemberId")
                        .HasColumnType("bigint")
                        .HasColumnName("FastestLapDriver_MemberId");

                    b.Property<long>("FastestQualyLap")
                        .HasColumnType("bigint");

                    b.Property<long?>("FastestQualyLapDriverMemberId")
                        .HasColumnType("bigint")
                        .HasColumnName("FastestQualyLapDriver_MemberId");

                    b.Property<string>("LastModifiedByUserId")
                        .HasColumnType("text");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("ResultId", "ScoringId")
                        .HasName("PK_dbo.ScoredResultEntities");

                    b.HasIndex(new[] { "FastestAvgLapDriverMemberId" }, "IX_FastestAvgLapDriver_MemberId");

                    b.HasIndex(new[] { "FastestLapDriverMemberId" }, "IX_FastestLapDriver_MemberId");

                    b.HasIndex(new[] { "FastestQualyLapDriverMemberId" }, "IX_FastestQualyLapDriver_MemberId");

                    b.HasIndex(new[] { "ResultId" }, "IX_ResultId")
                        .HasDatabaseName("IX_ResultId2");

                    b.HasIndex(new[] { "ScoringId" }, "IX_ScoringId")
                        .HasDatabaseName("IX_ScoringId1");

                    b.ToTable("ScoredResultEntities");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ScoredResultRowEntity", b =>
                {
                    b.Property<long>("ScoredResultRowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<double>("BonusPoints")
                        .HasColumnType("double");

                    b.Property<int>("FinalPosition")
                        .HasColumnType("int");

                    b.Property<double>("FinalPositionChange")
                        .HasColumnType("double");

                    b.Property<double>("PenaltyPoints")
                        .HasColumnType("double");

                    b.Property<bool>("PointsEligible")
                        .HasColumnType("tinyint(1)");

                    b.Property<double>("RacePoints")
                        .HasColumnType("double");

                    b.Property<long>("ResultRowId")
                        .HasColumnType("bigint");

                    b.Property<long>("ScoredResultId")
                        .HasColumnType("bigint");

                    b.Property<long>("ScoringId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<double>("TotalPoints")
                        .HasColumnType("double");

                    b.HasKey("ScoredResultRowId")
                        .HasName("PK_dbo.ScoredResultRowEntities");

                    b.HasIndex(new[] { "ResultRowId" }, "IX_ResultRowId")
                        .HasDatabaseName("IX_ResultRowId1");

                    b.HasIndex(new[] { "ScoredResultId", "ScoringId" }, "IX_ScoredResultId_ScoringId");

                    b.HasIndex(new[] { "TeamId" }, "IX_TeamId")
                        .HasDatabaseName("IX_TeamId1");

                    b.ToTable("ScoredResultRowEntities");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ScoredTeamResultRowEntity", b =>
                {
                    b.Property<long>("ScoredResultRowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("AvgLapTime")
                        .HasColumnType("bigint");

                    b.Property<double>("BonusPoints")
                        .HasColumnType("double");

                    b.Property<string>("CarClass")
                        .HasColumnType("text");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<long>("FastestLapTime")
                        .HasColumnType("bigint");

                    b.Property<int>("FinalPosition")
                        .HasColumnType("int");

                    b.Property<int>("FinalPositionChange")
                        .HasColumnType("int");

                    b.Property<double>("PenaltyPoints")
                        .HasColumnType("double");

                    b.Property<double>("RacePoints")
                        .HasColumnType("double");

                    b.Property<long>("ScoredResultId")
                        .HasColumnType("bigint");

                    b.Property<long>("ScoringId")
                        .HasColumnType("bigint");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<double>("TotalPoints")
                        .HasColumnType("double");

                    b.HasKey("ScoredResultRowId")
                        .HasName("PK_dbo.ScoredTeamResultRowEntities");

                    b.HasIndex(new[] { "ScoredResultId", "ScoringId" }, "IX_ScoredResultId_ScoringId")
                        .HasDatabaseName("IX_ScoredResultId_ScoringId1");

                    b.HasIndex(new[] { "TeamId" }, "IX_TeamId")
                        .HasDatabaseName("IX_TeamId2");

                    b.ToTable("ScoredTeamResultRowEntities");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ScoringEntity", b =>
                {
                    b.Property<long>("ScoringId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("AccumulateBy")
                        .HasColumnType("int");

                    b.Property<int>("AccumulateResultsOption")
                        .HasColumnType("int");

                    b.Property<int>("AverageRaceNr")
                        .HasColumnType("int");

                    b.Property<string>("BasePoints")
                        .HasColumnType("text");

                    b.Property<string>("BonusPoints")
                        .HasColumnType("text");

                    b.Property<long?>("ConnectedScheduleId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("DropWeeks")
                        .HasColumnType("int");

                    b.Property<long?>("ExtScoringSourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("FinalSortOptions")
                        .HasColumnType("text");

                    b.Property<string>("IncPenaltyPoints")
                        .HasColumnType("text");

                    b.Property<string>("LastModifiedByUserId")
                        .HasColumnType("text");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<long>("LeagueId")
                        .HasColumnType("bigint");

                    b.Property<int>("MaxResultsPerGroup")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long?>("ParentScoringId")
                        .HasColumnType("bigint");

                    b.Property<string>("PointsSortOptions")
                        .HasColumnType("text");

                    b.Property<int>("ScoringKind")
                        .HasColumnType("int");

                    b.Property<int>("ScoringSessionType")
                        .HasColumnType("int");

                    b.Property<string>("ScoringWeightValues")
                        .HasColumnType("text");

                    b.Property<long>("SeasonId")
                        .HasColumnType("bigint");

                    b.Property<int>("SessionSelectType")
                        .HasColumnType("int");

                    b.Property<bool?>("ShowResults")
                        .IsRequired()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("TakeGroupAverage")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("TakeResultsFromExtSource")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("UpdateTeamOnRecalculation")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("UseResultSetTeam")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("ScoringId")
                        .HasName("PK_dbo.ScoringEntities");

                    b.HasIndex(new[] { "ConnectedScheduleId" }, "IX_ConnectedScheduleId");

                    b.HasIndex(new[] { "ExtScoringSourceId" }, "IX_ExtScoringSourceId");

                    b.HasIndex(new[] { "ParentScoringId" }, "IX_ParentScoringId");

                    b.HasIndex(new[] { "SeasonId" }, "IX_SeasonId")
                        .HasDatabaseName("IX_SeasonId2");

                    b.ToTable("ScoringEntities");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ScoringTableEntity", b =>
                {
                    b.Property<long>("ScoringTableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("AverageRaceNr")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("DropRacesOption")
                        .HasColumnType("int");

                    b.Property<int>("DropWeeks")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedByUserId")
                        .HasColumnType("text");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("ResultsPerRaceCount")
                        .HasColumnType("int");

                    b.Property<string>("ScoringFactors")
                        .HasColumnType("text");

                    b.Property<int>("ScoringKind")
                        .HasColumnType("int");

                    b.Property<long>("SeasonId")
                        .HasColumnType("bigint");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("ScoringTableId")
                        .HasName("PK_dbo.ScoringTableEntities");

                    b.HasIndex(new[] { "SeasonId" }, "IX_SeasonId")
                        .HasDatabaseName("IX_SeasonId3");

                    b.ToTable("ScoringTableEntities");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ScoringTableMap", b =>
                {
                    b.Property<long>("ScoringTableRefId")
                        .HasColumnType("bigint");

                    b.Property<long>("ScoringRefId")
                        .HasColumnType("bigint");

                    b.HasKey("ScoringTableRefId", "ScoringRefId")
                        .HasName("PK_dbo.ScoringTableMap");

                    b.HasIndex(new[] { "ScoringRefId" }, "IX_ScoringRefId");

                    b.HasIndex(new[] { "ScoringTableRefId" }, "IX_ScoringTableRefId");

                    b.ToTable("ScoringTableMap");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.SeasonEntity", b =>
                {
                    b.Property<long>("SeasonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<bool>("Finished")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("HideCommentsBeforeVoted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModifiedByUserId")
                        .HasColumnType("text");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<long>("LeagueId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MainScoringScoringId")
                        .HasColumnType("bigint")
                        .HasColumnName("MainScoring_ScoringId");

                    b.Property<DateTime?>("SeasonEnd")
                        .HasColumnType("datetime");

                    b.Property<string>("SeasonName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("SeasonStart")
                        .HasColumnType("datetime");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("SeasonId")
                        .HasName("PK_dbo.SeasonEntities");

                    b.HasIndex("LeagueId");

                    b.HasIndex(new[] { "MainScoringScoringId" }, "IX_MainScoring_ScoringId");

                    b.ToTable("SeasonEntities");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.SessionEntity", b =>
                {
                    b.Property<long>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<string>("IrResultLink")
                        .HasColumnType("text");

                    b.Property<string>("IrSessionId")
                        .HasColumnType("text");

                    b.Property<int?>("Laps")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedByUserId")
                        .HasColumnType("text");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long?>("ParentSessionId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("PracticeAttached")
                        .HasColumnType("tinyint(1)");

                    b.Property<TimeSpan?>("PracticeLength")
                        .HasColumnType("time");

                    b.Property<bool?>("QualyAttached")
                        .HasColumnType("tinyint(1)");

                    b.Property<TimeSpan?>("QualyLength")
                        .HasColumnType("time");

                    b.Property<long?>("RaceId")
                        .HasColumnType("bigint");

                    b.Property<TimeSpan?>("RaceLength")
                        .HasColumnType("time");

                    b.Property<long?>("ScheduleId")
                        .HasColumnType("bigint");

                    b.Property<string>("SessionTitle")
                        .HasColumnType("text");

                    b.Property<int>("SessionType")
                        .HasColumnType("int");

                    b.Property<int>("SubSessionNr")
                        .HasColumnType("int");

                    b.Property<long?>("TrackId")
                        .HasColumnType("bigint");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("SessionId")
                        .HasName("PK_dbo.SessionEntities");

                    b.HasIndex("TrackId");

                    b.HasIndex(new[] { "ParentSessionId" }, "IX_ParentSessionId");

                    b.HasIndex(new[] { "ScheduleId" }, "IX_ScheduleId");

                    b.ToTable("SessionEntities");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.StatisticSetEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<long?>("CurrentChampId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<int?>("FinishedRaces")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FirstDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ImportSource")
                        .HasColumnType("text");

                    b.Property<bool?>("IsSeasonFinished")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastDate")
                        .HasColumnType("datetime");

                    b.Property<string>("LastModifiedByUserId")
                        .HasColumnType("text");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<bool>("RequiresRecalculation")
                        .HasColumnType("tinyint(1)");

                    b.Property<long?>("ScoringTableId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SeasonId")
                        .HasColumnType("bigint");

                    b.Property<long>("UpdateInterval")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CurrentChampId" }, "IX_CurrentChampId");

                    b.HasIndex(new[] { "ScoringTableId" }, "IX_ScoringTableId");

                    b.HasIndex(new[] { "SeasonId" }, "IX_SeasonId")
                        .HasDatabaseName("IX_SeasonId4");

                    b.ToTable("StatisticSetEntities");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.TeamEntity", b =>
                {
                    b.Property<long>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("LastModifiedByUserId")
                        .HasColumnType("text");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Profile")
                        .HasColumnType("text");

                    b.Property<string>("TeamColor")
                        .HasColumnType("text");

                    b.Property<string>("TeamHomepage")
                        .HasColumnType("text");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("TeamId")
                        .HasName("PK_dbo.TeamEntities");

                    b.ToTable("TeamEntities");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.TrackConfigEntity", b =>
                {
                    b.Property<long>("TrackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("ConfigName")
                        .HasColumnType("text");

                    b.Property<int>("ConfigType")
                        .HasColumnType("int");

                    b.Property<bool>("HasNigtLigthing")
                        .HasColumnType("tinyint(1)");

                    b.Property<double>("LengthKm")
                        .HasColumnType("double");

                    b.Property<string>("MapImageSrc")
                        .HasColumnType("text");

                    b.Property<long>("TrackGroupId")
                        .HasColumnType("bigint");

                    b.Property<int>("Turns")
                        .HasColumnType("int");

                    b.HasKey("TrackId")
                        .HasName("PK_dbo.TrackConfigEntities");

                    b.HasIndex("TrackGroupId");

                    b.ToTable("TrackConfigEntity");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.TrackGroupEntity", b =>
                {
                    b.Property<long>("TrackGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<string>("TrackName")
                        .HasColumnType("text");

                    b.HasKey("TrackGroupId")
                        .HasName("PK_dbo.TrackGroupEntities");

                    b.ToTable("TrackGroups");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.VoteCategoryEntity", b =>
                {
                    b.Property<long>("CatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("DefaultPenalty")
                        .HasColumnType("int");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.HasKey("CatId")
                        .HasName("PK_dbo.VoteCategoryEntities");

                    b.ToTable("VoteCategoryEntities");
                });

            modelBuilder.Entity("IncidentReviewEntityMemberEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.MemberEntity", null)
                        .WithMany()
                        .HasForeignKey("InvolvedMembersMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iRLeagueDatabaseCore.Models.IncidentReviewEntity", null)
                        .WithMany()
                        .HasForeignKey("InvolvedReviewsReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MemberEntityScoredResultEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.MemberEntity", null)
                        .WithMany()
                        .HasForeignKey("CleanestDriversMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iRLeagueDatabaseCore.Models.ScoredResultEntity", null)
                        .WithMany()
                        .HasForeignKey("CleanestDriverResultsResultId", "CleanestDriverResultsScoringId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MemberEntityScoredResultEntity1", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.MemberEntity", null)
                        .WithMany()
                        .HasForeignKey("HardChargersMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iRLeagueDatabaseCore.Models.ScoredResultEntity", null)
                        .WithMany()
                        .HasForeignKey("HardChargerResultsResultId", "HardChargerResultsScoringId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ScoredResultRowEntityScoredTeamResultRowEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.ScoredResultRowEntity", null)
                        .WithMany()
                        .HasForeignKey("ScoredResultRowsScoredResultRowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iRLeagueDatabaseCore.Models.ScoredTeamResultRowEntity", null)
                        .WithMany()
                        .HasForeignKey("ScoredTeamResultRowsScoredResultRowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ScoringEntitySessionEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.ScoringEntity", null)
                        .WithMany()
                        .HasForeignKey("ScoringsScoringId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iRLeagueDatabaseCore.Models.SessionEntity", null)
                        .WithMany()
                        .HasForeignKey("SessionsSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StatisticSetEntityStatisticSetEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.StatisticSetEntity", null)
                        .WithMany()
                        .HasForeignKey("DependendStatisticSetsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iRLeagueDatabaseCore.Models.StatisticSetEntity", null)
                        .WithMany()
                        .HasForeignKey("LeagueStatisticSetsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.AcceptedReviewVoteEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.VoteCategoryEntity", "CustomVoteCat")
                        .WithMany("AcceptedReviewVoteEntities")
                        .HasForeignKey("CustomVoteCatId")
                        .HasConstraintName("FK_dbo.AcceptedReviewVotes_dbo.VoteCategorys_CustomVoteCatId");

                    b.HasOne("iRLeagueDatabaseCore.Models.MemberEntity", "MemberAtFault")
                        .WithMany("AcceptedReviewVoteEntities")
                        .HasForeignKey("MemberAtFaultId")
                        .HasConstraintName("FK_dbo.AcceptedReviewVotes_dbo.LeagueMembers_MemberAtFaultId");

                    b.HasOne("iRLeagueDatabaseCore.Models.IncidentReviewEntity", "Review")
                        .WithMany("AcceptedReviewVoteEntities")
                        .HasForeignKey("ReviewId")
                        .HasConstraintName("FK_dbo.AcceptedReviewVotes_dbo.IncidentReviews_ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomVoteCat");

                    b.Navigation("MemberAtFault");

                    b.Navigation("Review");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.AddPenaltyEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.ScoredResultRowEntity", "ScoredResultRow")
                        .WithOne("AddPenaltyEntity")
                        .HasForeignKey("iRLeagueDatabaseCore.Models.AddPenaltyEntity", "ScoredResultRowId")
                        .HasConstraintName("FK_dbo.AddPenaltys_dbo.ScoredResultRows_ScoredResultRowId")
                        .IsRequired();

                    b.Navigation("ScoredResultRow");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.CommentBaseEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.CommentBaseEntity", "ReplyToComment")
                        .WithMany("InverseReplyToComment")
                        .HasForeignKey("ReplyToCommentId")
                        .HasConstraintName("FK_dbo.CommentBases_dbo.CommentBases_ReplyToCommentId");

                    b.HasOne("iRLeagueDatabaseCore.Models.IncidentReviewEntity", "Review")
                        .WithMany("CommentBaseEntities")
                        .HasForeignKey("ReviewId")
                        .HasConstraintName("FK_dbo.CommentBases_dbo.IncidentReviews_ReviewId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ReplyToComment");

                    b.Navigation("Review");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.CommentReviewVoteEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.CommentBaseEntity", "Comment")
                        .WithMany("CommentReviewVoteEntities")
                        .HasForeignKey("CommentId")
                        .HasConstraintName("FK_dbo.CommentReviewVotes_dbo.CommentBases_CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iRLeagueDatabaseCore.Models.VoteCategoryEntity", "CustomVoteCat")
                        .WithMany("CommentReviewVoteEntities")
                        .HasForeignKey("CustomVoteCatId")
                        .HasConstraintName("FK_dbo.CommentReviewVotes_dbo.VoteCategorys_CustomVoteCatId");

                    b.HasOne("iRLeagueDatabaseCore.Models.MemberEntity", "MemberAtFault")
                        .WithMany("CommentReviewVoteEntities")
                        .HasForeignKey("MemberAtFaultId")
                        .HasConstraintName("FK_dbo.CommentReviewVotes_dbo.LeagueMembers_MemberAtFaultId");

                    b.Navigation("Comment");

                    b.Navigation("CustomVoteCat");

                    b.Navigation("MemberAtFault");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.CustomIncidentEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.LeagueEntity", "League")
                        .WithMany()
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("League");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.DriverStatisticRowEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.SessionEntity", "FirstRace")
                        .WithMany("DriverStatisticRowEntityFirstRaces")
                        .HasForeignKey("FirstRaceId")
                        .HasConstraintName("FK_dbo.DriverStatisticRows_dbo.Sessions_FirstRaceId");

                    b.HasOne("iRLeagueDatabaseCore.Models.ScoredResultRowEntity", "FirstResultRow")
                        .WithMany("DriverStatisticRowEntityFirstResultRows")
                        .HasForeignKey("FirstResultRowId")
                        .HasConstraintName("FK_dbo.DriverStatisticRows_dbo.ScoredResultRows_FirstResultRowId");

                    b.HasOne("iRLeagueDatabaseCore.Models.SessionEntity", "FirstSession")
                        .WithMany("DriverStatisticRowEntityFirstSessions")
                        .HasForeignKey("FirstSessionId")
                        .HasConstraintName("FK_dbo.DriverStatisticRows_dbo.Sessions_FirstSessionId");

                    b.HasOne("iRLeagueDatabaseCore.Models.SessionEntity", "LastRace")
                        .WithMany("DriverStatisticRowEntityLastRaces")
                        .HasForeignKey("LastRaceId")
                        .HasConstraintName("FK_dbo.DriverStatisticRows_dbo.Sessions_LastRaceId");

                    b.HasOne("iRLeagueDatabaseCore.Models.ScoredResultRowEntity", "LastResultRow")
                        .WithMany("DriverStatisticRowEntityLastResultRows")
                        .HasForeignKey("LastResultRowId")
                        .HasConstraintName("FK_dbo.DriverStatisticRows_dbo.ScoredResultRows_LastResultRowId");

                    b.HasOne("iRLeagueDatabaseCore.Models.SessionEntity", "LastSession")
                        .WithMany("DriverStatisticRowEntityLastSessions")
                        .HasForeignKey("LastSessionId")
                        .HasConstraintName("FK_dbo.DriverStatisticRows_dbo.Sessions_LastSessionId");

                    b.HasOne("iRLeagueDatabaseCore.Models.MemberEntity", "Member")
                        .WithMany("DriverStatisticRowEntities")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_dbo.DriverStatisticRows_dbo.LeagueMembers_MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iRLeagueDatabaseCore.Models.StatisticSetEntity", "StatisticSet")
                        .WithMany("DriverStatisticRowEntities")
                        .HasForeignKey("StatisticSetId")
                        .HasConstraintName("FK_dbo.DriverStatisticRows_dbo.StatisticSets_StatisticSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FirstRace");

                    b.Navigation("FirstResultRow");

                    b.Navigation("FirstSession");

                    b.Navigation("LastRace");

                    b.Navigation("LastResultRow");

                    b.Navigation("LastSession");

                    b.Navigation("Member");

                    b.Navigation("StatisticSet");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.IRSimSessionDetailsEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.ResultEntity", "Result")
                        .WithOne("IRSimSessionDetails")
                        .HasForeignKey("iRLeagueDatabaseCore.Models.IRSimSessionDetailsEntity", "ResultId")
                        .HasConstraintName("FK_dbo.IRSimSessionDetailss_dbo.Results_ResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Result");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.IncidentReviewEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.SessionEntity", "Session")
                        .WithMany("IncidentReviewEntities")
                        .HasForeignKey("SessionId")
                        .HasConstraintName("FK_dbo.IncidentReviews_dbo.Sessions_SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Session");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.MemberEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.TeamEntity", null)
                        .WithMany("LeagueMemberEntities")
                        .HasForeignKey("TeamEntityTeamId");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ResultEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.SessionEntity", "Session")
                        .WithOne("ResultEntity")
                        .HasForeignKey("iRLeagueDatabaseCore.Models.ResultEntity", "ResultId")
                        .HasConstraintName("FK_dbo.Results_dbo.Sessions_ResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iRLeagueDatabaseCore.Models.SeasonEntity", "Season")
                        .WithMany("Results")
                        .HasForeignKey("SeasonId")
                        .HasConstraintName("FK_dbo.Results_dbo.Seasons_SeasonId");

                    b.Navigation("Season");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ResultRowEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.MemberEntity", "Member")
                        .WithMany("ResultRowEntities")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_dbo.ResultRows_dbo.LeagueMembers_MemberId")
                        .IsRequired();

                    b.HasOne("iRLeagueDatabaseCore.Models.ResultEntity", "Result")
                        .WithMany("ResultRows")
                        .HasForeignKey("ResultId")
                        .HasConstraintName("FK_dbo.ResultRows_dbo.Results_ResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iRLeagueDatabaseCore.Models.TeamEntity", "Team")
                        .WithMany("ResultRowEntities")
                        .HasForeignKey("TeamId")
                        .HasConstraintName("FK_dbo.ResultRows_dbo.Teams_TeamId");

                    b.Navigation("Member");

                    b.Navigation("Result");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ResultsFilterOptionEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.ScoringEntity", "Scoring")
                        .WithMany("ResultsFilterOptionEntities")
                        .HasForeignKey("ScoringId")
                        .HasConstraintName("FK_dbo.ResultsFilterOptions_dbo.Scorings_ScoringId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Scoring");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ReviewPenaltyEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.ScoredResultRowEntity", "ResultRow")
                        .WithMany("ReviewPenaltyEntities")
                        .HasForeignKey("ResultRowId")
                        .HasConstraintName("FK_dbo.ReviewPenaltys_dbo.ScoredResultRows_ResultRowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iRLeagueDatabaseCore.Models.IncidentReviewEntity", "Review")
                        .WithMany("ReviewPenaltyEntities")
                        .HasForeignKey("ReviewId")
                        .HasConstraintName("FK_dbo.ReviewPenaltys_dbo.IncidentReviews_ReviewId")
                        .IsRequired();

                    b.HasOne("iRLeagueDatabaseCore.Models.AcceptedReviewVoteEntity", "ReviewVote")
                        .WithMany("ReviewPenaltyEntities")
                        .HasForeignKey("ReviewVoteId")
                        .HasConstraintName("FK_dbo.ReviewPenaltys_dbo.AcceptedReviewVotes_ReviewVoteId");

                    b.Navigation("ResultRow");

                    b.Navigation("Review");

                    b.Navigation("ReviewVote");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ScheduleEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.LeagueEntity", "League")
                        .WithMany()
                        .HasForeignKey("LeagueId")
                        .HasConstraintName("FK_dbo.Schedules_dbo.Leagues_LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iRLeagueDatabaseCore.Models.SeasonEntity", "Season")
                        .WithMany("Schedules")
                        .HasForeignKey("SeasonId")
                        .HasConstraintName("FK_dbo.Schedules_dbo.Seasons_SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("League");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ScoredResultEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.MemberEntity", "FastestAvgLapDriver")
                        .WithMany("FastestAvgLapResults")
                        .HasForeignKey("FastestAvgLapDriverMemberId")
                        .HasConstraintName("FK_dbo.ScoredResults_dbo.LeagueMembers_FAvgLapDriver_MemberId");

                    b.HasOne("iRLeagueDatabaseCore.Models.MemberEntity", "FastestLapDriver")
                        .WithMany("FastestLapResults")
                        .HasForeignKey("FastestLapDriverMemberId")
                        .HasConstraintName("FK_dbo.ScoredResults_dbo.LeagueMembers_FLapDriver_MemberId");

                    b.HasOne("iRLeagueDatabaseCore.Models.MemberEntity", "FastestQualyLapDriver")
                        .WithMany("FastestQualyLapResults")
                        .HasForeignKey("FastestQualyLapDriverMemberId")
                        .HasConstraintName("FK_dbo.ScoredResults_dbo.LeagueMembers_QLapDriver_MemberId");

                    b.HasOne("iRLeagueDatabaseCore.Models.ResultEntity", "Result")
                        .WithMany("ScoredResults")
                        .HasForeignKey("ResultId")
                        .HasConstraintName("FK_dbo.ScoredResults_dbo.Results_ResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iRLeagueDatabaseCore.Models.ScoringEntity", "Scoring")
                        .WithMany("ScoredResultEntities")
                        .HasForeignKey("ScoringId")
                        .HasConstraintName("FK_dbo.ScoredResults_dbo.Scorings_ScoringId")
                        .IsRequired();

                    b.Navigation("FastestAvgLapDriver");

                    b.Navigation("FastestLapDriver");

                    b.Navigation("FastestQualyLapDriver");

                    b.Navigation("Result");

                    b.Navigation("Scoring");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ScoredResultRowEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.ResultRowEntity", "ResultRow")
                        .WithMany("ScoredResultRowEntities")
                        .HasForeignKey("ResultRowId")
                        .HasConstraintName("FK_dbo.ScoredResultRows_dbo.ResultRows_ResultRowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iRLeagueDatabaseCore.Models.TeamEntity", "Team")
                        .WithMany("ScoredResultRowEntities")
                        .HasForeignKey("TeamId")
                        .HasConstraintName("FK_dbo.ScoredResultRows_dbo.Teams_TeamId");

                    b.HasOne("iRLeagueDatabaseCore.Models.ScoredResultEntity", "Scor")
                        .WithMany("ScoredResultRows")
                        .HasForeignKey("ScoredResultId", "ScoringId")
                        .HasConstraintName("FK_dbo.ScrResultRows_dbo.ScrResults_ScrResultId_ScoringId")
                        .IsRequired();

                    b.Navigation("ResultRow");

                    b.Navigation("Scor");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ScoredTeamResultRowEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.TeamEntity", "Team")
                        .WithMany("ScoredTeamResultRowEntities")
                        .HasForeignKey("TeamId")
                        .HasConstraintName("FK_dbo.ScoredTeamResultRows_dbo.Teams_TeamId")
                        .IsRequired();

                    b.HasOne("iRLeagueDatabaseCore.Models.ScoredResultEntity", "ScoredResult")
                        .WithMany("ScoredTeamResultRows")
                        .HasForeignKey("ScoredResultId", "ScoringId")
                        .HasConstraintName("FK_dbo.ScrTeamResultRows_dbo.ScrResults_ScrResultId_ScoringId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScoredResult");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ScoringEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.ScheduleEntity", "ConnectedSchedule")
                        .WithMany("Scorings")
                        .HasForeignKey("ConnectedScheduleId")
                        .HasConstraintName("FK_dbo.Scorings_dbo.Schedules_ConnectedSchedule_ScheduleId");

                    b.HasOne("iRLeagueDatabaseCore.Models.ScoringEntity", "ExtScoringSource")
                        .WithMany("InverseExtScoringSource")
                        .HasForeignKey("ExtScoringSourceId")
                        .HasConstraintName("FK_dbo.Scorings_dbo.Scorings_ExtScoringSourceId");

                    b.HasOne("iRLeagueDatabaseCore.Models.ScoringEntity", "ParentScoring")
                        .WithMany("InverseParentScoring")
                        .HasForeignKey("ParentScoringId")
                        .HasConstraintName("FK_dbo.Scorings_dbo.Scorings_ParentScoringId");

                    b.HasOne("iRLeagueDatabaseCore.Models.SeasonEntity", "Season")
                        .WithMany("Scorings")
                        .HasForeignKey("SeasonId")
                        .HasConstraintName("FK_dbo.Scorings_dbo.Seasons_Season_SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConnectedSchedule");

                    b.Navigation("ExtScoringSource");

                    b.Navigation("ParentScoring");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ScoringTableEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.SeasonEntity", "Season")
                        .WithMany("ScoringTables")
                        .HasForeignKey("SeasonId")
                        .HasConstraintName("FK_dbo.ScoringTables_dbo.Seasons_Season_SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Season");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ScoringTableMap", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.ScoringEntity", "ScoringRef")
                        .WithMany("ScoringTableMaps")
                        .HasForeignKey("ScoringRefId")
                        .HasConstraintName("FK_dbo.ScoringTableMap_dbo.Scorings_ScoringRefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iRLeagueDatabaseCore.Models.ScoringTableEntity", "ScoringTableRef")
                        .WithMany("ScoringTableMaps")
                        .HasForeignKey("ScoringTableRefId")
                        .HasConstraintName("FK_dbo.ScrTableMap_dbo.ScrTables_ScrTableRefId")
                        .IsRequired();

                    b.Navigation("ScoringRef");

                    b.Navigation("ScoringTableRef");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.SeasonEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.LeagueEntity", "League")
                        .WithMany("Seasons")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iRLeagueDatabaseCore.Models.ScoringEntity", "MainScoring")
                        .WithMany("SeasonEntities")
                        .HasForeignKey("MainScoringScoringId")
                        .HasConstraintName("FK_dbo.Seasons_dbo.Scorings_MainScoring_ScoringId");

                    b.Navigation("League");

                    b.Navigation("MainScoring");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.SessionEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.SessionEntity", "ParentSession")
                        .WithMany("InverseParentSession")
                        .HasForeignKey("ParentSessionId")
                        .HasConstraintName("FK_dbo.Sessions_dbo.Sessions_ParentSessionId");

                    b.HasOne("iRLeagueDatabaseCore.Models.ScheduleEntity", "Schedule")
                        .WithMany("Sessions")
                        .HasForeignKey("ScheduleId")
                        .HasConstraintName("FK_dbo.Sessions_dbo.Schedules_Schedule_ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("iRLeagueDatabaseCore.Models.TrackConfigEntity", "Track")
                        .WithMany()
                        .HasForeignKey("TrackId")
                        .HasConstraintName("FK_dbo.Sessions_dbo.TrackConfigs_TrackId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ParentSession");

                    b.Navigation("Schedule");

                    b.Navigation("Track");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.StatisticSetEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.MemberEntity", "CurrentChamp")
                        .WithMany("StatisticSetEntities")
                        .HasForeignKey("CurrentChampId")
                        .HasConstraintName("FK_dbo.StatisticSets_dbo.LeagueMembers_CurrentChampId");

                    b.HasOne("iRLeagueDatabaseCore.Models.ScoringTableEntity", "ScoringTable")
                        .WithMany("StatisticSetEntities")
                        .HasForeignKey("ScoringTableId")
                        .HasConstraintName("FK_dbo.StatisticSets_dbo.ScoringTables_ScoringTableId");

                    b.HasOne("iRLeagueDatabaseCore.Models.SeasonEntity", "Season")
                        .WithMany("StatisticSets")
                        .HasForeignKey("SeasonId")
                        .HasConstraintName("FK_dbo.StatisticSets_dbo.Seasons_SeasonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("CurrentChamp");

                    b.Navigation("ScoringTable");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.TrackConfigEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.TrackGroupEntity", "TrackGroup")
                        .WithMany("TrackConfigs")
                        .HasForeignKey("TrackGroupId")
                        .HasConstraintName("FK_dbo.TrackGroups_dbo.TrackConfigs_TrackGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TrackGroup");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.AcceptedReviewVoteEntity", b =>
                {
                    b.Navigation("ReviewPenaltyEntities");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.CommentBaseEntity", b =>
                {
                    b.Navigation("CommentReviewVoteEntities");

                    b.Navigation("InverseReplyToComment");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.IncidentReviewEntity", b =>
                {
                    b.Navigation("AcceptedReviewVoteEntities");

                    b.Navigation("CommentBaseEntities");

                    b.Navigation("ReviewPenaltyEntities");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.LeagueEntity", b =>
                {
                    b.Navigation("Seasons");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.MemberEntity", b =>
                {
                    b.Navigation("AcceptedReviewVoteEntities");

                    b.Navigation("CommentReviewVoteEntities");

                    b.Navigation("DriverStatisticRowEntities");

                    b.Navigation("FastestAvgLapResults");

                    b.Navigation("FastestLapResults");

                    b.Navigation("FastestQualyLapResults");

                    b.Navigation("ResultRowEntities");

                    b.Navigation("StatisticSetEntities");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ResultEntity", b =>
                {
                    b.Navigation("IRSimSessionDetails");

                    b.Navigation("ResultRows");

                    b.Navigation("ScoredResults");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ResultRowEntity", b =>
                {
                    b.Navigation("ScoredResultRowEntities");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ScheduleEntity", b =>
                {
                    b.Navigation("Scorings");

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ScoredResultEntity", b =>
                {
                    b.Navigation("ScoredResultRows");

                    b.Navigation("ScoredTeamResultRows");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ScoredResultRowEntity", b =>
                {
                    b.Navigation("AddPenaltyEntity");

                    b.Navigation("DriverStatisticRowEntityFirstResultRows");

                    b.Navigation("DriverStatisticRowEntityLastResultRows");

                    b.Navigation("ReviewPenaltyEntities");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ScoringEntity", b =>
                {
                    b.Navigation("InverseExtScoringSource");

                    b.Navigation("InverseParentScoring");

                    b.Navigation("ResultsFilterOptionEntities");

                    b.Navigation("ScoredResultEntities");

                    b.Navigation("ScoringTableMaps");

                    b.Navigation("SeasonEntities");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ScoringTableEntity", b =>
                {
                    b.Navigation("ScoringTableMaps");

                    b.Navigation("StatisticSetEntities");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.SeasonEntity", b =>
                {
                    b.Navigation("Results");

                    b.Navigation("Schedules");

                    b.Navigation("Scorings");

                    b.Navigation("ScoringTables");

                    b.Navigation("StatisticSets");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.SessionEntity", b =>
                {
                    b.Navigation("DriverStatisticRowEntityFirstRaces");

                    b.Navigation("DriverStatisticRowEntityFirstSessions");

                    b.Navigation("DriverStatisticRowEntityLastRaces");

                    b.Navigation("DriverStatisticRowEntityLastSessions");

                    b.Navigation("IncidentReviewEntities");

                    b.Navigation("InverseParentSession");

                    b.Navigation("ResultEntity");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.StatisticSetEntity", b =>
                {
                    b.Navigation("DriverStatisticRowEntities");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.TeamEntity", b =>
                {
                    b.Navigation("LeagueMemberEntities");

                    b.Navigation("ResultRowEntities");

                    b.Navigation("ScoredResultRowEntities");

                    b.Navigation("ScoredTeamResultRowEntities");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.TrackGroupEntity", b =>
                {
                    b.Navigation("TrackConfigs");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.VoteCategoryEntity", b =>
                {
                    b.Navigation("AcceptedReviewVoteEntities");

                    b.Navigation("CommentReviewVoteEntities");
                });
#pragma warning restore 612, 618
        }
    }
}
