// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using iRLeagueDatabaseCore.Models;

namespace iRLeagueDatabaseCore.Migrations
{
    [DbContext(typeof(LeagueDbContext))]
    [Migration("20220104162949_CreateLeagueDbCore")]
    partial class CreateLeagueDbCore
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "Latin1_General_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.AcceptedReviewVoteEntity", b =>
                {
                    b.Property<long>("ReviewVoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CustomVoteCatId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("LeagueId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MemberAtFaultId")
                        .HasColumnType("bigint");

                    b.Property<long>("ReviewId")
                        .HasColumnType("bigint");

                    b.Property<int>("Vote")
                        .HasColumnType("int");

                    b.HasKey("ReviewVoteId")
                        .HasName("PK_dbo.AcceptedReviewVoteEntities");

                    b.HasIndex(new[] { "CustomVoteCatId" }, "IX_CustomVoteCatId");

                    b.HasIndex(new[] { "MemberAtFaultId" }, "IX_MemberAtFaultId");

                    b.HasIndex(new[] { "ReviewId" }, "IX_ReviewId");

                    b.ToTable("AcceptedReviewVoteEntities");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.AddPenaltyEntity", b =>
                {
                    b.Property<long>("ScoredResultRowId")
                        .HasColumnType("bigint");

                    b.Property<long>("LeagueId")
                        .HasColumnType("bigint");

                    b.Property<int>("PenaltyPoints")
                        .HasColumnType("int");

                    b.HasKey("ScoredResultRowId")
                        .HasName("PK_dbo.AddPenaltyEntities");

                    b.HasIndex(new[] { "ScoredResultRowId" }, "IX_ScoredResultRowId");

                    b.ToTable("AddPenaltyEntities");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.CommentBaseEntity", b =>
                {
                    b.Property<long>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuthorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthorUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("LastModifiedByUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<long>("LeagueId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ReplyToCommentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ReviewId")
                        .HasColumnType("bigint");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("CommentId")
                        .HasName("PK_dbo.CommentBaseEntities");

                    b.HasIndex(new[] { "ReplyToCommentId" }, "IX_ReplyToCommentId");

                    b.HasIndex(new[] { "ReviewId" }, "IX_ReviewId")
                        .HasDatabaseName("IX_ReviewId1");

                    b.ToTable("CommentBaseEntities");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.CommentReviewVoteEntity", b =>
                {
                    b.Property<long>("ReviewVoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CommentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CustomVoteCatId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("LeagueId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MemberAtFaultId")
                        .HasColumnType("bigint");

                    b.Property<int>("Vote")
                        .HasColumnType("int");

                    b.HasKey("ReviewVoteId")
                        .HasName("PK_dbo.CommentReviewVoteEntities");

                    b.HasIndex(new[] { "CommentId" }, "IX_CommentId");

                    b.HasIndex(new[] { "CustomVoteCatId" }, "IX_CustomVoteCatId")
                        .HasDatabaseName("IX_CustomVoteCatId1");

                    b.HasIndex(new[] { "MemberAtFaultId" }, "IX_MemberAtFaultId")
                        .HasDatabaseName("IX_MemberAtFaultId1");

                    b.ToTable("CommentReviewVoteEntities");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.CustomIncidentEntity", b =>
                {
                    b.Property<long>("IncidentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<long>("LeagueId")
                        .HasColumnType("bigint");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IncidentId")
                        .HasName("PK_dbo.CustomIncidentEntities");

                    b.HasIndex("LeagueId");

                    b.ToTable("CustomIncidentEntities");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.DriverStatisticRowEntity", b =>
                {
                    b.Property<long>("StatisticSetId")
                        .HasColumnType("bigint");

                    b.Property<long>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<double>("AvgFinalPosition")
                        .HasColumnType("float");

                    b.Property<double>("AvgFinishPosition")
                        .HasColumnType("float");

                    b.Property<double>("AvgIncidentsPerKm")
                        .HasColumnType("float");

                    b.Property<double>("AvgIncidentsPerLap")
                        .HasColumnType("float");

                    b.Property<double>("AvgIncidentsPerRace")
                        .HasColumnType("float");

                    b.Property<double>("AvgIrating")
                        .HasColumnType("float")
                        .HasColumnName("AvgIRating");

                    b.Property<double>("AvgPenaltyPointsPerKm")
                        .HasColumnType("float");

                    b.Property<double>("AvgPenaltyPointsPerLap")
                        .HasColumnType("float");

                    b.Property<double>("AvgPenaltyPointsPerRace")
                        .HasColumnType("float");

                    b.Property<double>("AvgPointsPerRace")
                        .HasColumnType("float");

                    b.Property<double>("AvgSrating")
                        .HasColumnType("float")
                        .HasColumnName("AvgSRating");

                    b.Property<double>("AvgStartPosition")
                        .HasColumnType("float");

                    b.Property<int>("BestFinalPosition")
                        .HasColumnType("int");

                    b.Property<double>("BestFinishPosition")
                        .HasColumnType("float");

                    b.Property<double>("BestStartPosition")
                        .HasColumnType("float");

                    b.Property<double>("BonusPoints")
                        .HasColumnType("float");

                    b.Property<int>("CleanestDriverAwards")
                        .HasColumnType("int");

                    b.Property<double>("CompletedLaps")
                        .HasColumnType("float");

                    b.Property<int>("CurrentSeasonPosition")
                        .HasColumnType("int");

                    b.Property<double>("DrivenKm")
                        .HasColumnType("float");

                    b.Property<int>("EndIrating")
                        .HasColumnType("int")
                        .HasColumnName("EndIRating");

                    b.Property<double>("EndSrating")
                        .HasColumnType("float")
                        .HasColumnName("EndSRating");

                    b.Property<int>("FastestLaps")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FirstRaceDate")
                        .HasColumnType("datetime");

                    b.Property<int>("FirstRaceFinalPosition")
                        .HasColumnType("int");

                    b.Property<double>("FirstRaceFinishPosition")
                        .HasColumnType("float");

                    b.Property<long?>("FirstRaceId")
                        .HasColumnType("bigint");

                    b.Property<double>("FirstRaceStartPosition")
                        .HasColumnType("float");

                    b.Property<long?>("FirstResultRowId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("FirstSessionDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("FirstSessionId")
                        .HasColumnType("bigint");

                    b.Property<int>("HardChargerAwards")
                        .HasColumnType("int");

                    b.Property<double>("Incidents")
                        .HasColumnType("float");

                    b.Property<int>("IncidentsUnderInvestigation")
                        .HasColumnType("int");

                    b.Property<int>("IncidentsWithPenalty")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastRaceDate")
                        .HasColumnType("datetime");

                    b.Property<int>("LastRaceFinalPosition")
                        .HasColumnType("int");

                    b.Property<double>("LastRaceFinishPosition")
                        .HasColumnType("float");

                    b.Property<long?>("LastRaceId")
                        .HasColumnType("bigint");

                    b.Property<double>("LastRaceStartPosition")
                        .HasColumnType("float");

                    b.Property<long?>("LastResultRowId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastSessionDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("LastSessionId")
                        .HasColumnType("bigint");

                    b.Property<double>("LeadingKm")
                        .HasColumnType("float");

                    b.Property<double>("LeadingLaps")
                        .HasColumnType("float");

                    b.Property<long>("LeagueId")
                        .HasColumnType("bigint");

                    b.Property<double>("PenaltyPoints")
                        .HasColumnType("float");

                    b.Property<int>("Poles")
                        .HasColumnType("int");

                    b.Property<double>("RacePoints")
                        .HasColumnType("float");

                    b.Property<int>("Races")
                        .HasColumnType("int");

                    b.Property<int>("RacesCompleted")
                        .HasColumnType("int");

                    b.Property<int>("RacesInPoints")
                        .HasColumnType("int");

                    b.Property<int>("StartIrating")
                        .HasColumnType("int")
                        .HasColumnName("StartIRating");

                    b.Property<double>("StartSrating")
                        .HasColumnType("float")
                        .HasColumnName("StartSRating");

                    b.Property<int>("Titles")
                        .HasColumnType("int");

                    b.Property<int>("Top10")
                        .HasColumnType("int");

                    b.Property<int>("Top15")
                        .HasColumnType("int");

                    b.Property<int>("Top20")
                        .HasColumnType("int");

                    b.Property<int>("Top25")
                        .HasColumnType("int");

                    b.Property<int>("Top3")
                        .HasColumnType("int");

                    b.Property<int>("Top5")
                        .HasColumnType("int");

                    b.Property<double>("TotalPoints")
                        .HasColumnType("float");

                    b.Property<int>("Wins")
                        .HasColumnType("int");

                    b.Property<int>("WorstFinalPosition")
                        .HasColumnType("int");

                    b.Property<double>("WorstFinishPosition")
                        .HasColumnType("float");

                    b.Property<double>("WorstStartPosition")
                        .HasColumnType("float");

                    b.HasKey("StatisticSetId", "MemberId")
                        .HasName("PK_dbo.DriverStatisticRowEntities");

                    b.HasIndex(new[] { "FirstRaceId" }, "IX_FirstRaceId");

                    b.HasIndex(new[] { "FirstResultRowId" }, "IX_FirstResultRowId");

                    b.HasIndex(new[] { "FirstSessionId" }, "IX_FirstSessionId");

                    b.HasIndex(new[] { "LastRaceId" }, "IX_LastRaceId");

                    b.HasIndex(new[] { "LastResultRowId" }, "IX_LastResultRowId");

                    b.HasIndex(new[] { "LastSessionId" }, "IX_LastSessionId");

                    b.HasIndex(new[] { "MemberId" }, "IX_MemberId");

                    b.HasIndex(new[] { "StatisticSetId" }, "IX_StatisticSetId");

                    b.ToTable("DriverStatisticRowEntities");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.IRSimSessionDetailsEntity", b =>
                {
                    b.Property<long>("ResultId")
                        .HasColumnType("bigint");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConfigName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CornersPerLap")
                        .HasColumnType("int");

                    b.Property<int>("DamageModel")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<long>("EventAverageLap")
                        .HasColumnType("bigint");

                    b.Property<int>("EventLapsComplete")
                        .HasColumnType("int");

                    b.Property<int>("EventStrengthOfField")
                        .HasColumnType("int");

                    b.Property<int>("Fog")
                        .HasColumnType("int");

                    b.Property<int>("IRRaceWeek")
                        .HasColumnType("int");

                    b.Property<long>("IRSeasonId")
                        .HasColumnType("bigint");

                    b.Property<string>("IRSeasonName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IRSeasonQuarter")
                        .HasColumnType("int");

                    b.Property<int>("IRSeasonYear")
                        .HasColumnType("int");

                    b.Property<long>("IRSessionId")
                        .HasColumnType("bigint");

                    b.Property<long>("IRSubsessionId")
                        .HasColumnType("bigint");

                    b.Property<int>("IRTrackId")
                        .HasColumnType("int");

                    b.Property<double>("KmDistPerLap")
                        .HasColumnType("float");

                    b.Property<bool>("LeaveMarbles")
                        .HasColumnType("bit");

                    b.Property<int>("LicenseCategory")
                        .HasColumnType("int");

                    b.Property<int>("MaxWeeks")
                        .HasColumnType("int");

                    b.Property<int>("NumCautionLaps")
                        .HasColumnType("int");

                    b.Property<int>("NumCautions")
                        .HasColumnType("int");

                    b.Property<int>("NumLeadChanges")
                        .HasColumnType("int");

                    b.Property<int>("PracticeGripCompound")
                        .HasColumnType("int");

                    b.Property<int>("PracticeRubber")
                        .HasColumnType("int");

                    b.Property<int>("QualifyGripCompund")
                        .HasColumnType("int");

                    b.Property<int>("QualifyRubber")
                        .HasColumnType("int");

                    b.Property<int>("RaceGripCompound")
                        .HasColumnType("int");

                    b.Property<int>("RaceRubber")
                        .HasColumnType("int");

                    b.Property<int>("RelHumidity")
                        .HasColumnType("int");

                    b.Property<string>("SessionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("SimStartUtcOffset")
                        .HasColumnType("bigint")
                        .HasColumnName("SimStartUTCOffset");

                    b.Property<DateTime?>("SimStartUtcTime")
                        .HasColumnType("datetime")
                        .HasColumnName("SimStartUTCTime");

                    b.Property<int>("Skies")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime");

                    b.Property<int>("TempUnits")
                        .HasColumnType("int");

                    b.Property<int>("TempValue")
                        .HasColumnType("int");

                    b.Property<int>("TimeOfDay")
                        .HasColumnType("int");

                    b.Property<int>("TrackCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("TrackName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WarmupGripCompound")
                        .HasColumnType("int");

                    b.Property<int>("WarmupRubber")
                        .HasColumnType("int");

                    b.Property<int>("WeatherType")
                        .HasColumnType("int");

                    b.Property<int>("WeatherVarInitial")
                        .HasColumnType("int");

                    b.Property<int>("WeatherVarOngoing")
                        .HasColumnType("int");

                    b.Property<int>("WindDir")
                        .HasColumnType("int");

                    b.Property<int>("WindUnits")
                        .HasColumnType("int");

                    b.HasKey("ResultId");

                    b.ToTable("IRSimSessionDetailsEntity");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.IncidentReviewEntity", b =>
                {
                    b.Property<long>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuthorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthorUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Corner")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("FullDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IncidentKind")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IncidentNr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedByUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<long>("LeagueId")
                        .HasColumnType("bigint");

                    b.Property<string>("OnLap")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResultLongText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("SessionId")
                        .HasColumnType("bigint");

                    b.Property<TimeSpan>("TimeStamp")
                        .HasColumnType("time");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("ReviewId")
                        .HasName("PK_dbo.IncidentReviewEntities");

                    b.HasIndex(new[] { "SessionId" }, "IX_SessionId");

                    b.ToTable("IncidentReviewEntities");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.IncidentReviewInvolvedLeagueMember", b =>
                {
                    b.Property<long>("ReviewRefId")
                        .HasColumnType("bigint");

                    b.Property<long>("MemberRefId")
                        .HasColumnType("bigint");

                    b.HasKey("ReviewRefId", "MemberRefId")
                        .HasName("PK_dbo.IncidentReview_InvolvedLeagueMember");

                    b.HasIndex(new[] { "MemberRefId" }, "IX_MemberRefId");

                    b.HasIndex(new[] { "ReviewRefId" }, "IX_ReviewRefId");

                    b.ToTable("IncidentReview_InvolvedLeagueMember");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.LeagueEntity", b =>
                {
                    b.Property<long>("LeagueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameFull")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LeagueId")
                        .HasName("PK_dbo.LeagueEntities");

                    b.ToTable("LeagueEntity");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.LeagueStatisticSetSeasonStatisticSet", b =>
                {
                    b.Property<long>("LeagueStatisticSetRefId")
                        .HasColumnType("bigint");

                    b.Property<long>("SeasonStatisticSetRefId")
                        .HasColumnType("bigint");

                    b.HasKey("LeagueStatisticSetRefId", "SeasonStatisticSetRefId")
                        .HasName("PK_dbo.LeagueStatisticSet_SeasonStatisticSet");

                    b.HasIndex(new[] { "LeagueStatisticSetRefId" }, "IX_LeagueStatisticSetRefId");

                    b.HasIndex(new[] { "SeasonStatisticSetRefId" }, "IX_SeasonStatisticSetRefId");

                    b.ToTable("LeagueStatisticSet_SeasonStatisticSet");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.MemberEntity", b =>
                {
                    b.Property<long>("MemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DanLisaId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiscordId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Firstname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IRacingId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("TeamEntityTeamId")
                        .HasColumnType("bigint");

                    b.HasKey("MemberId")
                        .HasName("PK_dbo.LeagueMemberEntities");

                    b.HasIndex("TeamEntityTeamId");

                    b.ToTable("LeagueMemberEntities");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ResultEntity", b =>
                {
                    b.Property<long>("ResultId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("LastModifiedByUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<long>("PoleLaptime")
                        .HasColumnType("bigint");

                    b.Property<bool>("RequiresRecalculation")
                        .HasColumnType("bit");

                    b.Property<long?>("SeasonId")
                        .HasColumnType("bigint");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("ResultId")
                        .HasName("PK_dbo.ResultEntities");

                    b.HasIndex(new[] { "ResultId" }, "IX_ResultId");

                    b.HasIndex(new[] { "SeasonId" }, "IX_SeasonId");

                    b.ToTable("ResultEntities");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ResultRowEntity", b =>
                {
                    b.Property<long>("ResultRowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AvgLapTime")
                        .HasColumnType("bigint");

                    b.Property<string>("Car")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CarClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<int>("CarNumber")
                        .HasColumnType("int");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<int>("ClubId")
                        .HasColumnType("int");

                    b.Property<string>("ClubName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("CompletedLaps")
                        .HasColumnType("float");

                    b.Property<double>("CompletedPct")
                        .HasColumnType("float");

                    b.Property<string>("ContactLaps")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("Division")
                        .HasColumnType("int");

                    b.Property<int>("FastLapNr")
                        .HasColumnType("int");

                    b.Property<long>("FastestLapTime")
                        .HasColumnType("bigint");

                    b.Property<double>("FinishPosition")
                        .HasColumnType("float");

                    b.Property<double>("Incidents")
                        .HasColumnType("float");

                    b.Property<long>("Interval")
                        .HasColumnType("bigint");

                    b.Property<string>("IracingId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("IRacingId");

                    b.Property<double>("LeadLaps")
                        .HasColumnType("float");

                    b.Property<string>("License")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<int>("NewCpi")
                        .HasColumnType("int");

                    b.Property<int>("NewIrating")
                        .HasColumnType("int")
                        .HasColumnName("NewIRating");

                    b.Property<int>("NewLicenseLevel")
                        .HasColumnType("int");

                    b.Property<double>("NewSafetyRating")
                        .HasColumnType("float");

                    b.Property<int>("NumContactLaps")
                        .HasColumnType("int");

                    b.Property<int>("NumOfftrackLaps")
                        .HasColumnType("int");

                    b.Property<int>("NumPitStops")
                        .HasColumnType("int");

                    b.Property<string>("OfftrackLaps")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OldCpi")
                        .HasColumnType("int");

                    b.Property<int>("OldIrating")
                        .HasColumnType("int")
                        .HasColumnName("OldIRating");

                    b.Property<int>("OldLicenseLevel")
                        .HasColumnType("int");

                    b.Property<double>("OldSafetyRating")
                        .HasColumnType("float");

                    b.Property<string>("PittedLaps")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("PointsEligible")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<double>("PositionChange")
                        .HasColumnType("float");

                    b.Property<long>("QualifyingTime")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("QualifyingTimeAt")
                        .HasColumnType("datetime");

                    b.Property<long>("ResultId")
                        .HasColumnType("bigint");

                    b.Property<int>("SeasonStartIrating")
                        .HasColumnType("int")
                        .HasColumnName("SeasonStartIRating");

                    b.Property<int>("SimSessionType")
                        .HasColumnType("int");

                    b.Property<double>("StartPosition")
                        .HasColumnType("float");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<long?>("TeamId")
                        .HasColumnType("bigint");

                    b.HasKey("ResultRowId")
                        .HasName("PK_dbo.ResultRowEntities");

                    b.HasIndex(new[] { "MemberId" }, "IX_MemberId")
                        .HasDatabaseName("IX_MemberId1");

                    b.HasIndex(new[] { "ResultId" }, "IX_ResultId")
                        .HasDatabaseName("IX_ResultId1");

                    b.HasIndex(new[] { "TeamId" }, "IX_TeamId");

                    b.ToTable("ResultRowEntities");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ResultsFilterOptionEntity", b =>
                {
                    b.Property<long>("ResultsFilterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ColumnPropertyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Comparator")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<bool>("Exclude")
                        .HasColumnType("bit");

                    b.Property<bool>("FilterPointsOnly")
                        .HasColumnType("bit");

                    b.Property<string>("FilterValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedByUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("ResultsFilterType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ScoringId")
                        .HasColumnType("bigint");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("ResultsFilterId")
                        .HasName("PK_dbo.ResultsFilterOptionEntities");

                    b.HasIndex(new[] { "ScoringId" }, "IX_ScoringId");

                    b.ToTable("ResultsFilterOptionEntities");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ReviewPenaltyEntity", b =>
                {
                    b.Property<long>("ResultRowId")
                        .HasColumnType("bigint");

                    b.Property<long>("ReviewId")
                        .HasColumnType("bigint");

                    b.Property<int>("PenaltyPoints")
                        .HasColumnType("int");

                    b.Property<long?>("ReviewVoteId")
                        .HasColumnType("bigint");

                    b.HasKey("ResultRowId", "ReviewId")
                        .HasName("PK_dbo.ReviewPenaltyEntities");

                    b.HasIndex(new[] { "ResultRowId" }, "IX_ResultRowId");

                    b.HasIndex(new[] { "ReviewId" }, "IX_ReviewId")
                        .HasDatabaseName("IX_ReviewId2");

                    b.HasIndex(new[] { "ReviewVoteId" }, "IX_ReviewVoteId");

                    b.ToTable("ReviewPenaltyEntities");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ScheduleEntity", b =>
                {
                    b.Property<long>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("LastModifiedByUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<long>("LeagueId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("SeasonSeasonId")
                        .HasColumnType("bigint")
                        .HasColumnName("Season_SeasonId");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("ScheduleId")
                        .HasName("PK_dbo.ScheduleEntities");

                    b.HasIndex(new[] { "SeasonSeasonId" }, "IX_Season_SeasonId");

                    b.ToTable("ScheduleEntities");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ScoredResultCleanestDriver", b =>
                {
                    b.Property<long>("ResultRefId")
                        .HasColumnType("bigint");

                    b.Property<long>("ScoringRefId")
                        .HasColumnType("bigint");

                    b.Property<long>("LeagueMemberRefId")
                        .HasColumnType("bigint");

                    b.HasKey("ResultRefId", "ScoringRefId", "LeagueMemberRefId")
                        .HasName("PK_dbo.ScoredResult_CleanestDrivers");

                    b.HasIndex(new[] { "LeagueMemberRefId" }, "IX_LeagueMemberRefId");

                    b.HasIndex(new[] { "ResultRefId", "ScoringRefId" }, "IX_ResultRefId_ScoringRefId");

                    b.ToTable("ScoredResult_CleanestDrivers");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ScoredResultEntity", b =>
                {
                    b.Property<long>("ResultId")
                        .HasColumnType("bigint");

                    b.Property<long>("ScoringId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<long>("FastestAvgLap")
                        .HasColumnType("bigint");

                    b.Property<long?>("FastestAvgLapDriverMemberId")
                        .HasColumnType("bigint")
                        .HasColumnName("FastestAvgLapDriver_MemberId");

                    b.Property<long>("FastestLap")
                        .HasColumnType("bigint");

                    b.Property<long?>("FastestLapDriverMemberId")
                        .HasColumnType("bigint")
                        .HasColumnName("FastestLapDriver_MemberId");

                    b.Property<long>("FastestQualyLap")
                        .HasColumnType("bigint");

                    b.Property<long?>("FastestQualyLapDriverMemberId")
                        .HasColumnType("bigint")
                        .HasColumnName("FastestQualyLapDriver_MemberId");

                    b.Property<string>("LastModifiedByUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("ResultId", "ScoringId")
                        .HasName("PK_dbo.ScoredResultEntities");

                    b.HasIndex(new[] { "FastestAvgLapDriverMemberId" }, "IX_FastestAvgLapDriver_MemberId");

                    b.HasIndex(new[] { "FastestLapDriverMemberId" }, "IX_FastestLapDriver_MemberId");

                    b.HasIndex(new[] { "FastestQualyLapDriverMemberId" }, "IX_FastestQualyLapDriver_MemberId");

                    b.HasIndex(new[] { "ResultId" }, "IX_ResultId")
                        .HasDatabaseName("IX_ResultId2");

                    b.HasIndex(new[] { "ScoringId" }, "IX_ScoringId")
                        .HasDatabaseName("IX_ScoringId1");

                    b.ToTable("ScoredResultEntities");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ScoredResultHardCharger", b =>
                {
                    b.Property<long>("ResultRefId")
                        .HasColumnType("bigint");

                    b.Property<long>("ScoringRefId")
                        .HasColumnType("bigint");

                    b.Property<long>("MemberRefId")
                        .HasColumnType("bigint");

                    b.HasKey("ResultRefId", "ScoringRefId", "MemberRefId")
                        .HasName("PK_dbo.ScoredResult_HardChargers");

                    b.HasIndex(new[] { "MemberRefId" }, "IX_LeagueMemberRefId")
                        .HasDatabaseName("IX_LeagueMemberRefId1");

                    b.HasIndex(new[] { "ResultRefId", "ScoringRefId" }, "IX_ResultRefId_ScoringRefId")
                        .HasDatabaseName("IX_ResultRefId_ScoringRefId1");

                    b.ToTable("ScoredResult_HardChargers");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ScoredResultRowEntity", b =>
                {
                    b.Property<long>("ScoredResultRowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("BonusPoints")
                        .HasColumnType("float");

                    b.Property<int>("FinalPosition")
                        .HasColumnType("int");

                    b.Property<double>("FinalPositionChange")
                        .HasColumnType("float");

                    b.Property<double>("PenaltyPoints")
                        .HasColumnType("float");

                    b.Property<bool>("PointsEligible")
                        .HasColumnType("bit");

                    b.Property<double>("RacePoints")
                        .HasColumnType("float");

                    b.Property<long>("ResultRowId")
                        .HasColumnType("bigint");

                    b.Property<long>("ScoredResultId")
                        .HasColumnType("bigint");

                    b.Property<long>("ScoringId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<double>("TotalPoints")
                        .HasColumnType("float");

                    b.HasKey("ScoredResultRowId")
                        .HasName("PK_dbo.ScoredResultRowEntities");

                    b.HasIndex(new[] { "ResultRowId" }, "IX_ResultRowId")
                        .HasDatabaseName("IX_ResultRowId1");

                    b.HasIndex(new[] { "ScoredResultId", "ScoringId" }, "IX_ScoredResultId_ScoringId");

                    b.HasIndex(new[] { "TeamId" }, "IX_TeamId")
                        .HasDatabaseName("IX_TeamId1");

                    b.ToTable("ScoredResultRowEntities");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ScoredTeamResultRowEntity", b =>
                {
                    b.Property<long>("ScoredResultRowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AvgLapTime")
                        .HasColumnType("bigint");

                    b.Property<double>("BonusPoints")
                        .HasColumnType("float");

                    b.Property<string>("CarClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<long>("FastestLapTime")
                        .HasColumnType("bigint");

                    b.Property<int>("FinalPosition")
                        .HasColumnType("int");

                    b.Property<int>("FinalPositionChange")
                        .HasColumnType("int");

                    b.Property<double>("PenaltyPoints")
                        .HasColumnType("float");

                    b.Property<double>("RacePoints")
                        .HasColumnType("float");

                    b.Property<long>("ScoredResultId")
                        .HasColumnType("bigint");

                    b.Property<long>("ScoringId")
                        .HasColumnType("bigint");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<double>("TotalPoints")
                        .HasColumnType("float");

                    b.HasKey("ScoredResultRowId")
                        .HasName("PK_dbo.ScoredTeamResultRowEntities");

                    b.HasIndex(new[] { "ScoredResultId", "ScoringId" }, "IX_ScoredResultId_ScoringId")
                        .HasDatabaseName("IX_ScoredResultId_ScoringId1");

                    b.HasIndex(new[] { "TeamId" }, "IX_TeamId")
                        .HasDatabaseName("IX_TeamId2");

                    b.ToTable("ScoredTeamResultRowEntities");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ScoredTeamResultRowsGroup", b =>
                {
                    b.Property<long>("ScoredTeamResultRowRefId")
                        .HasColumnType("bigint");

                    b.Property<long>("ScoredResultRowRefId")
                        .HasColumnType("bigint");

                    b.HasKey("ScoredTeamResultRowRefId", "ScoredResultRowRefId")
                        .HasName("PK_dbo.ScoredTeamResultRowsGroup");

                    b.HasIndex(new[] { "ScoredResultRowRefId" }, "IX_ScoredResultRowRefId");

                    b.HasIndex(new[] { "ScoredTeamResultRowRefId" }, "IX_ScoredTeamResultRowRefId");

                    b.ToTable("ScoredTeamResultRowsGroup");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ScoringEntity", b =>
                {
                    b.Property<long>("ScoringId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccumulateBy")
                        .HasColumnType("int");

                    b.Property<int>("AccumulateResultsOption")
                        .HasColumnType("int");

                    b.Property<int>("AverageRaceNr")
                        .HasColumnType("int");

                    b.Property<string>("BasePoints")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BonusPoints")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ConnectedScheduleId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DropWeeks")
                        .HasColumnType("int");

                    b.Property<long?>("ExtScoringSourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("FinalSortOptions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IncPenaltyPoints")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedByUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<long>("LeagueId")
                        .HasColumnType("bigint");

                    b.Property<int>("MaxResultsPerGroup")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ParentScoringId")
                        .HasColumnType("bigint");

                    b.Property<string>("PointsSortOptions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ScoringKind")
                        .HasColumnType("int");

                    b.Property<int>("ScoringSessionType")
                        .HasColumnType("int");

                    b.Property<string>("ScoringWeightValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("SeasonId")
                        .HasColumnType("bigint");

                    b.Property<int>("SessionSelectType")
                        .HasColumnType("int");

                    b.Property<bool?>("ShowResults")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("TakeGroupAverage")
                        .HasColumnType("bit");

                    b.Property<bool>("TakeResultsFromExtSource")
                        .HasColumnType("bit");

                    b.Property<bool>("UpdateTeamOnRecalculation")
                        .HasColumnType("bit");

                    b.Property<bool>("UseResultSetTeam")
                        .HasColumnType("bit");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("ScoringId")
                        .HasName("PK_dbo.ScoringEntities");

                    b.HasIndex(new[] { "ConnectedScheduleId" }, "IX_ConnectedScheduleId");

                    b.HasIndex(new[] { "ExtScoringSourceId" }, "IX_ExtScoringSourceId");

                    b.HasIndex(new[] { "ParentScoringId" }, "IX_ParentScoringId");

                    b.HasIndex(new[] { "SeasonId" }, "IX_SeasonId")
                        .HasDatabaseName("IX_SeasonId1");

                    b.ToTable("ScoringEntities");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ScoringSession", b =>
                {
                    b.Property<long>("ScoringRefId")
                        .HasColumnType("bigint");

                    b.Property<long>("SessionRefId")
                        .HasColumnType("bigint");

                    b.HasKey("ScoringRefId", "SessionRefId")
                        .HasName("PK_dbo.Scoring_Session");

                    b.HasIndex(new[] { "ScoringRefId" }, "IX_ScoringRefId");

                    b.HasIndex(new[] { "SessionRefId" }, "IX_SessionRefId");

                    b.ToTable("Scoring_Session");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ScoringTableEntity", b =>
                {
                    b.Property<long>("ScoringTableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AverageRaceNr")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("DropRacesOption")
                        .HasColumnType("int");

                    b.Property<int>("DropWeeks")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedByUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResultsPerRaceCount")
                        .HasColumnType("int");

                    b.Property<string>("ScoringFactors")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ScoringKind")
                        .HasColumnType("int");

                    b.Property<long>("SeasonId")
                        .HasColumnType("bigint");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("ScoringTableId")
                        .HasName("PK_dbo.ScoringTableEntities");

                    b.HasIndex(new[] { "SeasonId" }, "IX_SeasonId")
                        .HasDatabaseName("IX_SeasonId2");

                    b.ToTable("ScoringTableEntities");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ScoringTableMap", b =>
                {
                    b.Property<long>("ScoringTableRefId")
                        .HasColumnType("bigint");

                    b.Property<long>("ScoringRefId")
                        .HasColumnType("bigint");

                    b.HasKey("ScoringTableRefId", "ScoringRefId")
                        .HasName("PK_dbo.ScoringTableMap");

                    b.HasIndex(new[] { "ScoringRefId" }, "IX_ScoringRefId")
                        .HasDatabaseName("IX_ScoringRefId1");

                    b.HasIndex(new[] { "ScoringTableRefId" }, "IX_ScoringTableRefId");

                    b.ToTable("ScoringTableMap");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.SeasonEntity", b =>
                {
                    b.Property<long>("SeasonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<bool>("Finished")
                        .HasColumnType("bit");

                    b.Property<bool>("HideCommentsBeforeVoted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedByUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<long>("LeagueId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MainScoringScoringId")
                        .HasColumnType("bigint")
                        .HasColumnName("MainScoring_ScoringId");

                    b.Property<DateTime?>("SeasonEnd")
                        .HasColumnType("datetime");

                    b.Property<string>("SeasonName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SeasonStart")
                        .HasColumnType("datetime");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("SeasonId")
                        .HasName("PK_dbo.SeasonEntities");

                    b.HasIndex("LeagueId");

                    b.HasIndex(new[] { "MainScoringScoringId" }, "IX_MainScoring_ScoringId");

                    b.ToTable("SeasonEntities");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.SessionBaseEntity", b =>
                {
                    b.Property<long>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<string>("IrResultLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IrSessionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Laps")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedByUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("LocationId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ParentSessionId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("PracticeAttached")
                        .HasColumnType("bit");

                    b.Property<TimeSpan?>("PracticeLength")
                        .HasColumnType("time");

                    b.Property<bool?>("QualyAttached")
                        .HasColumnType("bit");

                    b.Property<TimeSpan?>("QualyLength")
                        .HasColumnType("time");

                    b.Property<long?>("RaceId")
                        .HasColumnType("bigint");

                    b.Property<TimeSpan?>("RaceLength")
                        .HasColumnType("time");

                    b.Property<long?>("ScheduleId")
                        .HasColumnType("bigint");

                    b.Property<string>("SessionTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SessionType")
                        .HasColumnType("int");

                    b.Property<int>("SubSessionNr")
                        .HasColumnType("int");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("SessionId")
                        .HasName("PK_dbo.SessionBaseEntities");

                    b.HasIndex(new[] { "ParentSessionId" }, "IX_ParentSessionId");

                    b.HasIndex(new[] { "ScheduleId" }, "IX_ScheduleId");

                    b.ToTable("SessionBaseEntities");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.StatisticSetEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<long?>("CurrentChampId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int?>("FinishedRaces")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FirstDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ImportSource")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsSeasonFinished")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastDate")
                        .HasColumnType("datetime");

                    b.Property<string>("LastModifiedByUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RequiresRecalculation")
                        .HasColumnType("bit");

                    b.Property<long?>("ScoringTableId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SeasonId")
                        .HasColumnType("bigint");

                    b.Property<long>("UpdateInterval")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CurrentChampId" }, "IX_CurrentChampId");

                    b.HasIndex(new[] { "ScoringTableId" }, "IX_ScoringTableId");

                    b.HasIndex(new[] { "SeasonId" }, "IX_SeasonId")
                        .HasDatabaseName("IX_SeasonId3");

                    b.ToTable("StatisticSetEntities");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.TeamEntity", b =>
                {
                    b.Property<long>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("LastModifiedByUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Profile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeamColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeamHomepage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("TeamId")
                        .HasName("PK_dbo.TeamEntities");

                    b.ToTable("TeamEntities");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.VoteCategoryEntity", b =>
                {
                    b.Property<long>("CatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DefaultPenalty")
                        .HasColumnType("int");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CatId")
                        .HasName("PK_dbo.VoteCategoryEntities");

                    b.ToTable("VoteCategoryEntities");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.AcceptedReviewVoteEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.VoteCategoryEntity", "CustomVoteCat")
                        .WithMany("AcceptedReviewVoteEntities")
                        .HasForeignKey("CustomVoteCatId")
                        .HasConstraintName("FK_dbo.AcceptedReviewVoteEntities_dbo.VoteCategoryEntities_CustomVoteCatId");

                    b.HasOne("iRLeagueDatabaseCore.Models.MemberEntity", "MemberAtFault")
                        .WithMany("AcceptedReviewVoteEntities")
                        .HasForeignKey("MemberAtFaultId")
                        .HasConstraintName("FK_dbo.AcceptedReviewVoteEntities_dbo.LeagueMemberEntities_MemberAtFaultId");

                    b.HasOne("iRLeagueDatabaseCore.Models.IncidentReviewEntity", "Review")
                        .WithMany("AcceptedReviewVoteEntities")
                        .HasForeignKey("ReviewId")
                        .HasConstraintName("FK_dbo.AcceptedReviewVoteEntities_dbo.IncidentReviewEntities_ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomVoteCat");

                    b.Navigation("MemberAtFault");

                    b.Navigation("Review");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.AddPenaltyEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.ScoredResultRowEntity", "ScoredResultRow")
                        .WithOne("AddPenaltyEntity")
                        .HasForeignKey("iRLeagueDatabaseCore.Models.AddPenaltyEntity", "ScoredResultRowId")
                        .HasConstraintName("FK_dbo.AddPenaltyEntities_dbo.ScoredResultRowEntities_ScoredResultRowId")
                        .IsRequired();

                    b.Navigation("ScoredResultRow");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.CommentBaseEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.CommentBaseEntity", "ReplyToComment")
                        .WithMany("InverseReplyToComment")
                        .HasForeignKey("ReplyToCommentId")
                        .HasConstraintName("FK_dbo.CommentBaseEntities_dbo.CommentBaseEntities_ReplyToCommentId");

                    b.HasOne("iRLeagueDatabaseCore.Models.IncidentReviewEntity", "Review")
                        .WithMany("CommentBaseEntities")
                        .HasForeignKey("ReviewId")
                        .HasConstraintName("FK_dbo.CommentBaseEntities_dbo.IncidentReviewEntities_ReviewId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ReplyToComment");

                    b.Navigation("Review");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.CommentReviewVoteEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.CommentBaseEntity", "Comment")
                        .WithMany("CommentReviewVoteEntities")
                        .HasForeignKey("CommentId")
                        .HasConstraintName("FK_dbo.CommentReviewVoteEntities_dbo.CommentBaseEntities_CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iRLeagueDatabaseCore.Models.VoteCategoryEntity", "CustomVoteCat")
                        .WithMany("CommentReviewVoteEntities")
                        .HasForeignKey("CustomVoteCatId")
                        .HasConstraintName("FK_dbo.CommentReviewVoteEntities_dbo.VoteCategoryEntities_CustomVoteCatId");

                    b.HasOne("iRLeagueDatabaseCore.Models.MemberEntity", "MemberAtFault")
                        .WithMany("CommentReviewVoteEntities")
                        .HasForeignKey("MemberAtFaultId")
                        .HasConstraintName("FK_dbo.CommentReviewVoteEntities_dbo.LeagueMemberEntities_MemberAtFaultId");

                    b.Navigation("Comment");

                    b.Navigation("CustomVoteCat");

                    b.Navigation("MemberAtFault");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.CustomIncidentEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.LeagueEntity", "League")
                        .WithMany()
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("League");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.DriverStatisticRowEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.SessionBaseEntity", "FirstRace")
                        .WithMany("DriverStatisticRowEntityFirstRaces")
                        .HasForeignKey("FirstRaceId")
                        .HasConstraintName("FK_dbo.DriverStatisticRowEntities_dbo.SessionBaseEntities_FirstRaceId");

                    b.HasOne("iRLeagueDatabaseCore.Models.ScoredResultRowEntity", "FirstResultRow")
                        .WithMany("DriverStatisticRowEntityFirstResultRows")
                        .HasForeignKey("FirstResultRowId")
                        .HasConstraintName("FK_dbo.DriverStatisticRowEntities_dbo.ScoredResultRowEntities_FirstResultRowId");

                    b.HasOne("iRLeagueDatabaseCore.Models.SessionBaseEntity", "FirstSession")
                        .WithMany("DriverStatisticRowEntityFirstSessions")
                        .HasForeignKey("FirstSessionId")
                        .HasConstraintName("FK_dbo.DriverStatisticRowEntities_dbo.SessionBaseEntities_FirstSessionId");

                    b.HasOne("iRLeagueDatabaseCore.Models.SessionBaseEntity", "LastRace")
                        .WithMany("DriverStatisticRowEntityLastRaces")
                        .HasForeignKey("LastRaceId")
                        .HasConstraintName("FK_dbo.DriverStatisticRowEntities_dbo.SessionBaseEntities_LastRaceId");

                    b.HasOne("iRLeagueDatabaseCore.Models.ScoredResultRowEntity", "LastResultRow")
                        .WithMany("DriverStatisticRowEntityLastResultRows")
                        .HasForeignKey("LastResultRowId")
                        .HasConstraintName("FK_dbo.DriverStatisticRowEntities_dbo.ScoredResultRowEntities_LastResultRowId");

                    b.HasOne("iRLeagueDatabaseCore.Models.SessionBaseEntity", "LastSession")
                        .WithMany("DriverStatisticRowEntityLastSessions")
                        .HasForeignKey("LastSessionId")
                        .HasConstraintName("FK_dbo.DriverStatisticRowEntities_dbo.SessionBaseEntities_LastSessionId");

                    b.HasOne("iRLeagueDatabaseCore.Models.MemberEntity", "Member")
                        .WithMany("DriverStatisticRowEntities")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_dbo.DriverStatisticRowEntities_dbo.LeagueMemberEntities_MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iRLeagueDatabaseCore.Models.StatisticSetEntity", "StatisticSet")
                        .WithMany("DriverStatisticRowEntities")
                        .HasForeignKey("StatisticSetId")
                        .HasConstraintName("FK_dbo.DriverStatisticRowEntities_dbo.StatisticSetEntities_StatisticSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FirstRace");

                    b.Navigation("FirstResultRow");

                    b.Navigation("FirstSession");

                    b.Navigation("LastRace");

                    b.Navigation("LastResultRow");

                    b.Navigation("LastSession");

                    b.Navigation("Member");

                    b.Navigation("StatisticSet");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.IRSimSessionDetailsEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.ResultEntity", "Result")
                        .WithOne("IRSimSessionDetails")
                        .HasForeignKey("iRLeagueDatabaseCore.Models.IRSimSessionDetailsEntity", "ResultId")
                        .HasConstraintName("FK_dbo.IRSimSessionDetailsEntities_dbo.ResultEntities_ResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Result");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.IncidentReviewEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.SessionBaseEntity", "Session")
                        .WithMany("IncidentReviewEntities")
                        .HasForeignKey("SessionId")
                        .HasConstraintName("FK_dbo.IncidentReviewEntities_dbo.SessionBaseEntities_SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Session");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.IncidentReviewInvolvedLeagueMember", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.MemberEntity", "MemberRef")
                        .WithMany("IncidentReviewsInvolved")
                        .HasForeignKey("MemberRefId")
                        .HasConstraintName("FK_dbo.IncidentReview_InvolvedLeagueMember_dbo.LeagueMemberEntities_MemberRefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iRLeagueDatabaseCore.Models.IncidentReviewEntity", "ReviewRef")
                        .WithMany("IncidentReviewInvolvedLeagueMembers")
                        .HasForeignKey("ReviewRefId")
                        .HasConstraintName("FK_dbo.IncidentReview_InvolvedLeagueMember_dbo.IncidentReviewEntities_ReviewRefId")
                        .IsRequired();

                    b.Navigation("MemberRef");

                    b.Navigation("ReviewRef");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.LeagueStatisticSetSeasonStatisticSet", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.StatisticSetEntity", "LeagueStatisticSetRef")
                        .WithMany("LeagueStatisticSetSeasonStatisticSetLeagueStatisticSetRefs")
                        .HasForeignKey("LeagueStatisticSetRefId")
                        .HasConstraintName("FK_dbo.LeagueStatisticSet_SeasonStatisticSet_dbo.StatisticSetEntities_LeagueStatisticSetRefId")
                        .IsRequired();

                    b.HasOne("iRLeagueDatabaseCore.Models.StatisticSetEntity", "SeasonStatisticSetRef")
                        .WithMany("LeagueStatisticSetSeasonStatisticSetSeasonStatisticSetRefs")
                        .HasForeignKey("SeasonStatisticSetRefId")
                        .HasConstraintName("FK_dbo.LeagueStatisticSet_SeasonStatisticSet_dbo.StatisticSetEntities_SeasonStatisticSetRefId")
                        .IsRequired();

                    b.Navigation("LeagueStatisticSetRef");

                    b.Navigation("SeasonStatisticSetRef");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.MemberEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.TeamEntity", null)
                        .WithMany("LeagueMemberEntities")
                        .HasForeignKey("TeamEntityTeamId");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ResultEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.SessionBaseEntity", "Session")
                        .WithOne("ResultEntity")
                        .HasForeignKey("iRLeagueDatabaseCore.Models.ResultEntity", "ResultId")
                        .HasConstraintName("FK_dbo.ResultEntities_dbo.SessionBaseEntities_ResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iRLeagueDatabaseCore.Models.SeasonEntity", "Season")
                        .WithMany("ResultEntities")
                        .HasForeignKey("SeasonId")
                        .HasConstraintName("FK_dbo.ResultEntities_dbo.SeasonEntities_SeasonId");

                    b.Navigation("Season");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ResultRowEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.MemberEntity", "Member")
                        .WithMany("ResultRowEntities")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_dbo.ResultRowEntities_dbo.LeagueMemberEntities_MemberId")
                        .IsRequired();

                    b.HasOne("iRLeagueDatabaseCore.Models.ResultEntity", "Result")
                        .WithMany("ResultRows")
                        .HasForeignKey("ResultId")
                        .HasConstraintName("FK_dbo.ResultRowEntities_dbo.ResultEntities_ResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iRLeagueDatabaseCore.Models.TeamEntity", "Team")
                        .WithMany("ResultRowEntities")
                        .HasForeignKey("TeamId")
                        .HasConstraintName("FK_dbo.ResultRowEntities_dbo.TeamEntities_TeamId");

                    b.Navigation("Member");

                    b.Navigation("Result");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ResultsFilterOptionEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.ScoringEntity", "Scoring")
                        .WithMany("ResultsFilterOptionEntities")
                        .HasForeignKey("ScoringId")
                        .HasConstraintName("FK_dbo.ResultsFilterOptionEntities_dbo.ScoringEntities_ScoringId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Scoring");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ReviewPenaltyEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.ScoredResultRowEntity", "ResultRow")
                        .WithMany("ReviewPenaltyEntities")
                        .HasForeignKey("ResultRowId")
                        .HasConstraintName("FK_dbo.ReviewPenaltyEntities_dbo.ScoredResultRowEntities_ResultRowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iRLeagueDatabaseCore.Models.IncidentReviewEntity", "Review")
                        .WithMany("ReviewPenaltyEntities")
                        .HasForeignKey("ReviewId")
                        .HasConstraintName("FK_dbo.ReviewPenaltyEntities_dbo.IncidentReviewEntities_ReviewId")
                        .IsRequired();

                    b.HasOne("iRLeagueDatabaseCore.Models.AcceptedReviewVoteEntity", "ReviewVote")
                        .WithMany("ReviewPenaltyEntities")
                        .HasForeignKey("ReviewVoteId")
                        .HasConstraintName("FK_dbo.ReviewPenaltyEntities_dbo.AcceptedReviewVoteEntities_ReviewVoteId");

                    b.Navigation("ResultRow");

                    b.Navigation("Review");

                    b.Navigation("ReviewVote");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ScheduleEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.SeasonEntity", "SeasonSeason")
                        .WithMany("ScheduleEntities")
                        .HasForeignKey("SeasonSeasonId")
                        .HasConstraintName("FK_dbo.ScheduleEntities_dbo.SeasonEntities_Season_SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SeasonSeason");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ScoredResultCleanestDriver", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.MemberEntity", "LeagueMemberRef")
                        .WithMany("CleanestDriverResults")
                        .HasForeignKey("LeagueMemberRefId")
                        .HasConstraintName("FK_dbo.ScoredResult_CleanestDrivers_dbo.LeagueMemberEntities_LeagueMemberRefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iRLeagueDatabaseCore.Models.ScoredResultEntity", "ScoredResultEntity")
                        .WithMany("ScoredResultCleanestDrivers")
                        .HasForeignKey("ResultRefId", "ScoringRefId")
                        .HasConstraintName("FK_dbo.ScoredResult_CleanestDrivers_dbo.ScoredResultEntities_ResultRefId_ScoringRefId")
                        .IsRequired();

                    b.Navigation("LeagueMemberRef");

                    b.Navigation("ScoredResultEntity");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ScoredResultEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.MemberEntity", "FastestAvgLapDriverMember")
                        .WithMany("FastestAvgLapResults")
                        .HasForeignKey("FastestAvgLapDriverMemberId")
                        .HasConstraintName("FK_dbo.ScoredResultEntities_dbo.LeagueMemberEntities_FastestAvgLapDriver_MemberId");

                    b.HasOne("iRLeagueDatabaseCore.Models.MemberEntity", "FastestLapDriverMember")
                        .WithMany("FastestLapResults")
                        .HasForeignKey("FastestLapDriverMemberId")
                        .HasConstraintName("FK_dbo.ScoredResultEntities_dbo.LeagueMemberEntities_FastestLapDriver_MemberId");

                    b.HasOne("iRLeagueDatabaseCore.Models.MemberEntity", "FastestQualyLapDriverMember")
                        .WithMany("FastestQualyLapResults")
                        .HasForeignKey("FastestQualyLapDriverMemberId")
                        .HasConstraintName("FK_dbo.ScoredResultEntities_dbo.LeagueMemberEntities_FastestQualyLapDriver_MemberId");

                    b.HasOne("iRLeagueDatabaseCore.Models.ResultEntity", "Result")
                        .WithMany("ScoredResults")
                        .HasForeignKey("ResultId")
                        .HasConstraintName("FK_dbo.ScoredResultEntities_dbo.ResultEntities_ResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iRLeagueDatabaseCore.Models.ScoringEntity", "Scoring")
                        .WithMany("ScoredResultEntities")
                        .HasForeignKey("ScoringId")
                        .HasConstraintName("FK_dbo.ScoredResultEntities_dbo.ScoringEntities_ScoringId")
                        .IsRequired();

                    b.Navigation("FastestAvgLapDriverMember");

                    b.Navigation("FastestLapDriverMember");

                    b.Navigation("FastestQualyLapDriverMember");

                    b.Navigation("Result");

                    b.Navigation("Scoring");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ScoredResultHardCharger", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.MemberEntity", "MemberRef")
                        .WithMany("HardChargerResults")
                        .HasForeignKey("MemberRefId")
                        .HasConstraintName("FK_dbo.ScoredResult_HardChargers_dbo.LeagueMemberEntities_LeagueMemberRefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iRLeagueDatabaseCore.Models.ScoredResultEntity", "ScoredResultEntity")
                        .WithMany("ScoredResultHardChargers")
                        .HasForeignKey("ResultRefId", "ScoringRefId")
                        .HasConstraintName("FK_dbo.ScoredResult_HardChargers_dbo.ScoredResultEntities_ResultRefId_ScoringRefId")
                        .IsRequired();

                    b.Navigation("MemberRef");

                    b.Navigation("ScoredResultEntity");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ScoredResultRowEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.ResultRowEntity", "ResultRow")
                        .WithMany("ScoredResultRowEntities")
                        .HasForeignKey("ResultRowId")
                        .HasConstraintName("FK_dbo.ScoredResultRowEntities_dbo.ResultRowEntities_ResultRowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iRLeagueDatabaseCore.Models.TeamEntity", "Team")
                        .WithMany("ScoredResultRowEntities")
                        .HasForeignKey("TeamId")
                        .HasConstraintName("FK_dbo.ScoredResultRowEntities_dbo.TeamEntities_TeamId");

                    b.HasOne("iRLeagueDatabaseCore.Models.ScoredResultEntity", "Scor")
                        .WithMany("ScoredResultRowEntities")
                        .HasForeignKey("ScoredResultId", "ScoringId")
                        .HasConstraintName("FK_dbo.ScoredResultRowEntities_dbo.ScoredResultEntities_ScoredResultId_ScoringId")
                        .IsRequired();

                    b.Navigation("ResultRow");

                    b.Navigation("Scor");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ScoredTeamResultRowEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.TeamEntity", "Team")
                        .WithMany("ScoredTeamResultRowEntities")
                        .HasForeignKey("TeamId")
                        .HasConstraintName("FK_dbo.ScoredTeamResultRowEntities_dbo.TeamEntities_TeamId")
                        .IsRequired();

                    b.HasOne("iRLeagueDatabaseCore.Models.ScoredResultEntity", "Scor")
                        .WithMany("ScoredTeamResultRowEntities")
                        .HasForeignKey("ScoredResultId", "ScoringId")
                        .HasConstraintName("FK_dbo.ScoredTeamResultRowEntities_dbo.ScoredResultEntities_ScoredResultId_ScoringId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Scor");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ScoredTeamResultRowsGroup", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.ScoredResultRowEntity", "ScoredResultRowRef")
                        .WithMany("ScoredTeamResultRowsGroups")
                        .HasForeignKey("ScoredResultRowRefId")
                        .HasConstraintName("FK_dbo.ScoredTeamResultRowsGroup_dbo.ScoredResultRowEntities_ScoredResultRowRefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iRLeagueDatabaseCore.Models.ScoredTeamResultRowEntity", "ScoredTeamResultRowRef")
                        .WithMany("ScoredTeamResultRowsGroups")
                        .HasForeignKey("ScoredTeamResultRowRefId")
                        .HasConstraintName("FK_dbo.ScoredTeamResultRowsGroup_dbo.ScoredTeamResultRowEntities_ScoredTeamResultRowRefId")
                        .IsRequired();

                    b.Navigation("ScoredResultRowRef");

                    b.Navigation("ScoredTeamResultRowRef");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ScoringEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.ScheduleEntity", "ConnectedSchedule")
                        .WithMany("ScoringEntities")
                        .HasForeignKey("ConnectedScheduleId")
                        .HasConstraintName("FK_dbo.ScoringEntities_dbo.ScheduleEntities_ConnectedSchedule_ScheduleId");

                    b.HasOne("iRLeagueDatabaseCore.Models.ScoringEntity", "ExtScoringSource")
                        .WithMany("InverseExtScoringSource")
                        .HasForeignKey("ExtScoringSourceId")
                        .HasConstraintName("FK_dbo.ScoringEntities_dbo.ScoringEntities_ExtScoringSourceId");

                    b.HasOne("iRLeagueDatabaseCore.Models.ScoringEntity", "ParentScoring")
                        .WithMany("InverseParentScoring")
                        .HasForeignKey("ParentScoringId")
                        .HasConstraintName("FK_dbo.ScoringEntities_dbo.ScoringEntities_ParentScoringId");

                    b.HasOne("iRLeagueDatabaseCore.Models.SeasonEntity", "Season")
                        .WithMany("ScoringEntities")
                        .HasForeignKey("SeasonId")
                        .HasConstraintName("FK_dbo.ScoringEntities_dbo.SeasonEntities_Season_SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConnectedSchedule");

                    b.Navigation("ExtScoringSource");

                    b.Navigation("ParentScoring");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ScoringSession", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.ScoringEntity", "ScoringRef")
                        .WithMany("ScoringSessions")
                        .HasForeignKey("ScoringRefId")
                        .HasConstraintName("FK_dbo.Scoring_Session_dbo.ScoringEntities_ScoringRefId")
                        .IsRequired();

                    b.HasOne("iRLeagueDatabaseCore.Models.SessionBaseEntity", "SessionRef")
                        .WithMany("ScoringSessions")
                        .HasForeignKey("SessionRefId")
                        .HasConstraintName("FK_dbo.Scoring_Session_dbo.SessionBaseEntities_SessionRefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScoringRef");

                    b.Navigation("SessionRef");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ScoringTableEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.SeasonEntity", "Season")
                        .WithMany("ScoringTableEntities")
                        .HasForeignKey("SeasonId")
                        .HasConstraintName("FK_dbo.ScoringTableEntities_dbo.SeasonEntities_Season_SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Season");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ScoringTableMap", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.ScoringEntity", "ScoringRef")
                        .WithMany("ScoringTableMaps")
                        .HasForeignKey("ScoringRefId")
                        .HasConstraintName("FK_dbo.ScoringTableMap_dbo.ScoringEntities_ScoringRefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iRLeagueDatabaseCore.Models.ScoringTableEntity", "ScoringTableRef")
                        .WithMany("ScoringTableMaps")
                        .HasForeignKey("ScoringTableRefId")
                        .HasConstraintName("FK_dbo.ScoringTableMap_dbo.ScoringTableEntities_ScoringTableRefId")
                        .IsRequired();

                    b.Navigation("ScoringRef");

                    b.Navigation("ScoringTableRef");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.SeasonEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.LeagueEntity", "League")
                        .WithMany()
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iRLeagueDatabaseCore.Models.ScoringEntity", "MainScoringScoring")
                        .WithMany("SeasonEntities")
                        .HasForeignKey("MainScoringScoringId")
                        .HasConstraintName("FK_dbo.SeasonEntities_dbo.ScoringEntities_MainScoring_ScoringId");

                    b.Navigation("League");

                    b.Navigation("MainScoringScoring");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.SessionBaseEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.SessionBaseEntity", "ParentSession")
                        .WithMany("InverseParentSession")
                        .HasForeignKey("ParentSessionId")
                        .HasConstraintName("FK_dbo.SessionBaseEntities_dbo.SessionBaseEntities_ParentSessionId");

                    b.HasOne("iRLeagueDatabaseCore.Models.ScheduleEntity", "Schedule")
                        .WithMany("SessionBaseEntities")
                        .HasForeignKey("ScheduleId")
                        .HasConstraintName("FK_dbo.SessionBaseEntities_dbo.ScheduleEntities_Schedule_ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ParentSession");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.StatisticSetEntity", b =>
                {
                    b.HasOne("iRLeagueDatabaseCore.Models.MemberEntity", "CurrentChamp")
                        .WithMany("StatisticSetEntities")
                        .HasForeignKey("CurrentChampId")
                        .HasConstraintName("FK_dbo.StatisticSetEntities_dbo.LeagueMemberEntities_CurrentChampId");

                    b.HasOne("iRLeagueDatabaseCore.Models.ScoringTableEntity", "ScoringTable")
                        .WithMany("StatisticSetEntities")
                        .HasForeignKey("ScoringTableId")
                        .HasConstraintName("FK_dbo.StatisticSetEntities_dbo.ScoringTableEntities_ScoringTableId");

                    b.HasOne("iRLeagueDatabaseCore.Models.SeasonEntity", "Season")
                        .WithMany("StatisticSetEntities")
                        .HasForeignKey("SeasonId")
                        .HasConstraintName("FK_dbo.StatisticSetEntities_dbo.SeasonEntities_SeasonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("CurrentChamp");

                    b.Navigation("ScoringTable");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.AcceptedReviewVoteEntity", b =>
                {
                    b.Navigation("ReviewPenaltyEntities");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.CommentBaseEntity", b =>
                {
                    b.Navigation("CommentReviewVoteEntities");

                    b.Navigation("InverseReplyToComment");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.IncidentReviewEntity", b =>
                {
                    b.Navigation("AcceptedReviewVoteEntities");

                    b.Navigation("CommentBaseEntities");

                    b.Navigation("IncidentReviewInvolvedLeagueMembers");

                    b.Navigation("ReviewPenaltyEntities");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.MemberEntity", b =>
                {
                    b.Navigation("AcceptedReviewVoteEntities");

                    b.Navigation("CleanestDriverResults");

                    b.Navigation("CommentReviewVoteEntities");

                    b.Navigation("DriverStatisticRowEntities");

                    b.Navigation("FastestAvgLapResults");

                    b.Navigation("FastestLapResults");

                    b.Navigation("FastestQualyLapResults");

                    b.Navigation("HardChargerResults");

                    b.Navigation("IncidentReviewsInvolved");

                    b.Navigation("ResultRowEntities");

                    b.Navigation("StatisticSetEntities");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ResultEntity", b =>
                {
                    b.Navigation("IRSimSessionDetails");

                    b.Navigation("ResultRows");

                    b.Navigation("ScoredResults");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ResultRowEntity", b =>
                {
                    b.Navigation("ScoredResultRowEntities");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ScheduleEntity", b =>
                {
                    b.Navigation("ScoringEntities");

                    b.Navigation("SessionBaseEntities");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ScoredResultEntity", b =>
                {
                    b.Navigation("ScoredResultCleanestDrivers");

                    b.Navigation("ScoredResultHardChargers");

                    b.Navigation("ScoredResultRowEntities");

                    b.Navigation("ScoredTeamResultRowEntities");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ScoredResultRowEntity", b =>
                {
                    b.Navigation("AddPenaltyEntity");

                    b.Navigation("DriverStatisticRowEntityFirstResultRows");

                    b.Navigation("DriverStatisticRowEntityLastResultRows");

                    b.Navigation("ReviewPenaltyEntities");

                    b.Navigation("ScoredTeamResultRowsGroups");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ScoredTeamResultRowEntity", b =>
                {
                    b.Navigation("ScoredTeamResultRowsGroups");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ScoringEntity", b =>
                {
                    b.Navigation("InverseExtScoringSource");

                    b.Navigation("InverseParentScoring");

                    b.Navigation("ResultsFilterOptionEntities");

                    b.Navigation("ScoredResultEntities");

                    b.Navigation("ScoringSessions");

                    b.Navigation("ScoringTableMaps");

                    b.Navigation("SeasonEntities");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.ScoringTableEntity", b =>
                {
                    b.Navigation("ScoringTableMaps");

                    b.Navigation("StatisticSetEntities");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.SeasonEntity", b =>
                {
                    b.Navigation("ResultEntities");

                    b.Navigation("ScheduleEntities");

                    b.Navigation("ScoringEntities");

                    b.Navigation("ScoringTableEntities");

                    b.Navigation("StatisticSetEntities");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.SessionBaseEntity", b =>
                {
                    b.Navigation("DriverStatisticRowEntityFirstRaces");

                    b.Navigation("DriverStatisticRowEntityFirstSessions");

                    b.Navigation("DriverStatisticRowEntityLastRaces");

                    b.Navigation("DriverStatisticRowEntityLastSessions");

                    b.Navigation("IncidentReviewEntities");

                    b.Navigation("InverseParentSession");

                    b.Navigation("ResultEntity");

                    b.Navigation("ScoringSessions");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.StatisticSetEntity", b =>
                {
                    b.Navigation("DriverStatisticRowEntities");

                    b.Navigation("LeagueStatisticSetSeasonStatisticSetLeagueStatisticSetRefs");

                    b.Navigation("LeagueStatisticSetSeasonStatisticSetSeasonStatisticSetRefs");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.TeamEntity", b =>
                {
                    b.Navigation("LeagueMemberEntities");

                    b.Navigation("ResultRowEntities");

                    b.Navigation("ScoredResultRowEntities");

                    b.Navigation("ScoredTeamResultRowEntities");
                });

            modelBuilder.Entity("iRLeagueDatabaseCore.Models.VoteCategoryEntity", b =>
                {
                    b.Navigation("AcceptedReviewVoteEntities");

                    b.Navigation("CommentReviewVoteEntities");
                });
#pragma warning restore 612, 618
        }
    }
}
